{"version":3,"sources":["store/actions/graphLogActions.ts","store/types/index.ts","api.ts","components/graph/GraphSessionData.tsx","components/graph/GraphSession.tsx","pages/Graph.tsx","store/actions/tableLogActions.ts","components/table/TableSessionData.tsx","components/table/TableSessions.tsx","pages/TablePrinterPage.tsx","components/shared/MenuRoutes.tsx","components/shared/Menu.tsx","store/actions/htmlPrinterActions.ts","components/html/HtmlPrinterSessionData.tsx","components/html/HtmlPrinterSession.tsx","pages/HtmlPrinter.tsx","store/actions/simplePrinterActions.ts","components/simplePrinter/SimplePrinterData.tsx","components/simplePrinter/SimplePrinterSession.tsx","pages/SimplePrinterPage.tsx","components/combinedPrinter/CombinedPrinterSessions.tsx","store/actions/combinedPrinterActions.ts","pages/CombinedPrinterPage.tsx","components/customPrinter/CustomPrinterSessions.tsx","store/actions/customPrinterActions.ts","pages/CustomPrinter.tsx","App.tsx","serviceWorker.ts","store/reducers/tablePrinterReducer.ts","store/reducers/graphPrinterReducer.ts","store/reducers/simplePrinterReducer.ts","store/reducers/htmlPrinterReducer.ts","store/reducers/combinedPrinterReducer.ts","store/reducers/customPrinterReducer.ts","store/reducers/index.ts","store/sagas/index.ts","store/store.ts","index.tsx"],"names":["setGraphLog","payload","type","socket","openSocket","spiralGraphs","cb","console","log","on","emit","error","spiralLogs","data","simplePrinter","htmlPrinter","tablePrinter","randomColor","require","GraphSessionData","sessionId","useState","currentSession","setCurrentSession","useEffect","undefined","barState","labels","datasets","label","backgroundColor","count","length","borderWidth","options","responsive","scales","xAxes","ticks","maxRotation","minRotation","gridLines","offsetGridLines","position","yAxes","beginAtZero","sessionData","useSelector","state","graphPrinter","graphLogDispatch","useDispatch","sessionIndex","session","sessionIndexNew","findIndex","JSON","stringify","GraphSession","graphOneSession","setGraphOneSession","graphLayout","setGraphLayout","graphOneSessionId","graphTwoSessionId","twoGraphSession","setTwoGraphSession","graphThreeSessionId","threeGraphSession","setThreeGraphSession","handleSetGraphLayout","handleSetGraphTwoSessionId","graph","handleSetGraphThreeSessionId","handleDeleteSession","parsedPayload","parse","handleSetPayload","className","role","aria-label","Button","onClick","map","Fragment","style","border","borderRadius","padding","margin","key","variant","Badge","pill","marginRight","icon","faTimesCircle","Graph","setTableLog","TableSessions","tableLogDispatch","getData","setTableHeaderLog","Table","striped","bordered","hover","header","title","datum","id","TableSessionData","TableLog","payloadNew","rowData","routes","routeName","route","routeNames","Menu","history","useHistory","changeRoute","find","push","ButtonGroup","setHtmlPrinterLog","HtmlPrinterData","htmlPrinterLogDispatch","dangerouslySetInnerHTML","__html","htmlPayload","HtmlPrinterSessions","HtmlPrinterSessionData","HtmlPrinter","htmlPrinterDispatch","html","HtmlPrinterSession","setSimplePrinterLog","SimplePrinterSessionData","log_data","simplePrinterLogDispatch","toString","SimplePrinterSessions","SimplePrinter","simplePrinterDispatch","resultLabel","resultValue","SimplePrinterSession","CombinedPrinterSessions","combinedPrinter","combinedPrinterDispatch","CombinedPrinterLog","grid","combinedViewsPayload","views","setCombinedPrinter","callback","customPrinter","customPrinterDispatch","CustomPrinter","currentSessionData","setCurrentSessionData","handleSetCurrentSession","spiralCustom","setCustomPrinterLog","CustomPrinterSessions","App","path","exact","component","GraphPrinter","TablePrinter","CombinedPrinter","Boolean","window","location","hostname","match","initialTableLogsState","i","timestamp","Date","hostName","appName","priority","initialGraphLogsState","initialSimplePrinterState","initialCombinedPrinterState","initialCustomPrinterState","rootReducer","combineReducers","action","tablePayload","deleteSessionPayload","tempState","dataIndex","newSession","forEach","dataSingleton","name","value","newState","filter","graphDataPayload","deleteSessionId","tempData","concat","addSessionPayload","htmlDataPayload","sessionPayload","rootSaga","all","initialState","Store","sagaMiddleware","createSagaMiddleware","middleware","createStore","composeWithDevTools","applyMiddleware","runSaga","run","store","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"yVAWMA,EAA+C,SACnDC,GADmD,MAE/C,CACJC,KCH4B,iBDI5BD,QAASA,I,SEdLE,E,MAASC,GAAW,yBAe1B,SAASC,EAAaC,GACpBC,QAAQC,IAAI,qBACZL,EAAOM,GAAG,WAAW,WACnB,IACEN,EAAOO,KAAK,OAAQ,UACpBH,QAAQC,IAAI,gBACZ,MAAOG,GACP,OApBN,SAASC,EAAWN,GAClBH,EAAOM,GAAG,WAAW,WACnB,IACEN,EAAOO,KAAK,OAAQ,UACpBH,QAAQC,IAAI,gBACZ,MAAOG,GACP,OAAOC,EAAWN,OAGtBH,EAAOM,GAAG,kBAAkB,SAACI,GAAD,OAAeP,EAAGO,MAC9CV,EAAOM,GAAG,gBAAgB,SAACI,GAAD,OAAeP,EAAGO,MAUjCD,CAAWN,OAGtBH,EAAOM,GAAG,YAAY,SAACI,GAAD,OAAeP,EAAGO,MAE1C,SAASC,EAAcR,GACrBC,QAAQC,IAAI,sBACZL,EAAOM,GAAG,WAAW,WACnB,IACEN,EAAOO,KAAK,OAAQ,UACpBH,QAAQC,IAAI,gBACZ,MAAOG,GACP,OAAOG,EAAcR,OAGzBH,EAAOM,GAAG,oBAAoB,SAACI,GAAD,OAAeP,EAAGO,MAElD,SAASE,EAAYT,GACnBC,QAAQC,IAAI,oBACZL,EAAOM,GAAG,WAAW,WACnB,IACEN,EAAOO,KAAK,OAAQ,UACpBH,QAAQC,IAAI,gBACZ,MAAOG,GACP,OAAOI,EAAYT,OAGvBH,EAAOM,GAAG,kBAAkB,SAACI,GAAD,OAAeP,EAAGO,MAEhD,SAASG,EAAaV,GACpBC,QAAQC,IAAI,qBACZL,EAAOM,GAAG,WAAW,WACnB,IACEN,EAAOO,KAAK,OAAQ,UACpBH,QAAQC,IAAI,gBACZ,MAAOG,GACP,OAAOK,EAAaV,OAGxBH,EAAOM,GAAG,mBAAmB,SAACI,GAAD,OAAeP,EAAGO,M,YChD7CI,EAAcC,EAAQ,KA6GXC,EAvG4B,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAAgB,EAChBC,qBADgB,mBACrDC,EADqD,KACrCC,EADqC,KAG5DC,qBAAU,gBACUC,IAAdL,GAAyC,OAAdA,GAC7BG,OAAkBE,KACnB,CAACL,IAEJ,IAAIM,EAAW,CACbxB,MAAoB,OAAdoB,QAAc,IAAdA,OAAA,EAAAA,EAAgBpB,MAAOoB,EAAepB,KAAO,MACnDW,KAAM,CACJc,OAAM,OAAEL,QAAF,IAAEA,OAAF,EAAEA,EAAgBK,OACxBC,SAAU,CACR,CACEC,MAAK,OAAEP,QAAF,IAAEA,OAAF,EAAEA,EAAgBM,SAASC,MAChChB,KAAI,OAAES,QAAF,IAAEA,OAAF,EAAEA,EAAgBM,SAASf,KAC/BiB,gBAAiBb,EAAY,CAC3Bc,OAAqB,OAAdT,QAAc,IAAdA,OAAA,EAAAA,EAAgBM,SAASf,MAAzB,OACHS,QADG,IACHA,OADG,EACHA,EAAgBM,SAASf,KAAKmB,OAC9B,IAENC,YAAa,KAInBC,QAAS,CACPC,YAAY,EACZC,OAAQ,CACNC,MAAO,CACL,CACEC,MAAO,CACLC,YAAa,GACbC,YAAa,IAEfC,UAAW,CACTC,iBAAiB,IAGrB,CACEC,SAAU,MACVL,MAAO,CACLC,YAAa,GACbC,YAAa,IAEfC,UAAW,CACTC,iBAAiB,KAIvBE,MAAO,CACL,CACEN,MAAO,CACLO,aAAa,QAQjBC,EAAgBC,aAAY,SAACC,GAAD,OAAqBA,EAAMC,gBAAvDH,YACFI,EAAmBC,cAEnBC,EAAe,SAACC,GAAD,OACnBA,EAAQjC,YAAcA,GAYxB,OAVAI,qBAAU,WACR,IAAM8B,EAAkBR,EAAYS,UAAUH,GAC9C7C,QAAQC,IAAI,YAAagD,KAAKC,UAAUX,EAAYQ,KAEpD,IAAMrD,EAAsB6C,EAAYQ,GACxC/B,EAAkBtB,GAElBM,QAAQC,IAAI,wBACX,CAAC0C,EAAkB9B,IAGpB,kBAAC,WAAD,KACqB,QAAlBM,EAASxB,MACR,kBAAC,MAAD,CAAKW,KAAMa,EAASb,KAAMqB,QAASR,EAASQ,UAE3B,SAAlBR,EAASxB,MACR,kBAAC,OAAD,CAAMW,KAAMa,EAASb,KAAMqB,QAASR,EAASQ,UAE5B,UAAlBR,EAASxB,MACR,kBAAC,QAAD,CAAOW,KAAMa,EAASb,KAAMqB,QAASR,EAASQ,UAE7B,aAAlBR,EAASxB,MACR,kBAAC,WAAD,CAAUW,KAAMa,EAASb,KAAMqB,QAASR,EAASQ,UAEhC,cAAlBR,EAASxB,MACR,kBAAC,QAAD,CAAOW,KAAMa,EAASb,KAAMqB,QAASR,EAASQ,UAE7B,WAAlBR,EAASxB,MACR,kBAAC,SAAD,CAAQW,KAAMa,EAASb,KAAMqB,QAASR,EAASQ,UAE9B,YAAlBR,EAASxB,MACR,kBAAC,UAAD,CAASW,KAAMa,EAASb,KAAMqB,QAASR,EAASQ,YC8UzCwB,EApbM,WAAO,IAClBZ,EAAgBC,aAAY,SAACC,GAAD,OAAqBA,EAAMC,gBAAvDH,YADiB,EAEqBzB,qBAFrB,mBAElBsC,EAFkB,KAEDC,EAFC,KAGnBV,EAAmBC,cAHA,EAIa9B,mBAAiB,WAJ9B,mBAIlBwC,EAJkB,KAILC,EAJK,OAKqBzC,mBAAS,CACrD0C,kBAAmB,GACnBC,kBAAmB,KAPI,mBAKlBC,EALkB,KAKDC,EALC,OASyB7C,mBAAS,CACzD0C,kBAAmB,GACnBC,kBAAmB,GACnBG,oBAAqB,KAZE,mBASlBC,EATkB,KASCC,EATD,KAenBC,EAAuB,SAACrE,GAC5B,OAAO6D,EAAe7D,IAMlBsE,EAA6B,SAACnD,EAAmBoD,GAErD,OADAjE,QAAQC,IAAI,mBAAoBY,EAAWoD,GAC7B,IAAVA,GACFjE,QAAQC,IAAI,kBACL0D,EAAmB,2BACrBD,GADoB,IAEvBF,kBAAmB3C,MAGT,IAAVoD,EACKN,EAAmB,2BACrBD,GADoB,IAEvBD,kBAAmB5C,UAHvB,GAMIqD,EAA+B,SAACrD,EAAmBoD,GACvD,OAAc,IAAVA,EACKH,EAAqB,2BACvBD,GADsB,IAEzBL,kBAAmB3C,KAET,IAAVoD,EACKH,EAAqB,2BACvBD,GADsB,IAEzBJ,kBAAmB5C,KAET,IAAVoD,EACKH,EAAqB,2BACvBD,GADsB,IAEzBD,oBAAqB/C,UAHzB,GAOIsD,EAAsB,SAACtD,GAC3B,OACE8B,EJnDA,CACJhD,KCTkC,uBDUlCD,QIiDwCmB,IACpCwC,OAAmBnC,IA4BvB,OAxBAD,qBAAU,WAqBRnB,GAAa,SAACJ,GAAD,OApBY,SAACA,GACxBM,QAAQC,IAAI,sBACZ,IAAMmE,EAAqBnB,KAAKoB,MAAM3E,GACtC,GACE0E,EAAchD,QACdgD,EAAc/C,UACd+C,EAAcvD,UACd,CACA,IAAMP,EAAmB,CACvBX,KAAMyE,EAAczE,KACpByB,OAAQgD,EAAchD,OACtBC,SAAU+C,EAAc/C,SACxBR,UAAWuD,EAAcvD,WAG3B,OAAO8B,EAAiBlD,EAAYa,IAGtC,OAAO,KAEyBgE,CAAiB5E,QAClD,CAACiD,IAGF,kBAAC,WAAD,KACE,yBAAK4B,UAAU,QACb,6BACE,yDAEF,4CACA,yBACEA,UAAU,2BACVC,KAAK,QACLC,aAAW,0BAEX,kBAACC,EAAA,EAAD,CACE/E,KAAK,SACLgF,QAAS,kBAAMZ,EAAqB,YACpCQ,UAAS,kCACS,YAAhBjB,EAA4B,SAAW,KAJ3C,WASA,kBAACoB,EAAA,EAAD,CACE/E,KAAK,SACLgF,QAAS,kBAAMZ,EAAqB,YACpCQ,UAAS,kCACS,YAAhBjB,EAA4B,SAAW,KAJ3C,YASA,kBAACoB,EAAA,EAAD,CACE/E,KAAK,SACLgF,QAAS,kBAAMZ,EAAqB,YACpCQ,UAAS,kCACS,YAAhBjB,EAA4B,SAAW,KAJ3C,aAWe,YAAhBA,GACC,6BACE,yBAAKiB,UAAU,2BACZhC,EAAYqC,KAAI,SAAC9B,GAAD,OACf,kBAAC,IAAM+B,SAAP,KACE,yBACEC,MAAO,CACLC,OAAQ,oBACRC,aAAc,EACdC,QAAS,EACTC,OAAQ,IAGV,kBAACR,EAAA,EAAD,CACES,IAAKrC,EAAQjC,UACbuE,QAAQ,QACRT,QAAS,kBA5HK9D,EA6HaiC,EAAQjC,UA5H9CwC,EAAmBxC,GADK,IAACA,IAgId,8BACE,kBAACwE,EAAA,EAAD,CACEC,MAAI,EACJF,QAAQ,OACRb,UAAU,iCAETzB,EAAQjC,UACT,0BAAMiE,MAAO,CAAES,YAAa,aAIlC,kBAACb,EAAA,EAAD,CACEU,QAAQ,QACRT,QAAS,kBAAMR,EAAoBrB,EAAQjC,aAE3C,kBAAC,IAAD,CAAiB2E,KAAMC,aAMhCrC,EACC,kBAAC,EAAD,CAAkBvC,UAAWuC,IAE7B,IAIW,YAAhBE,GACC,kBAAC,IAAMuB,SAAP,KACE,yBAAKN,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,2BACZhC,EAAYqC,KAAI,SAAC9B,GAAD,OACf,kBAAC,IAAM+B,SAAP,KACE,yBACEC,MAAO,CACLC,OAAQ,oBACRC,aAAc,EACdC,QAAS,EACTC,OAAQ,IAGV,kBAACR,EAAA,EAAD,CACES,IAAKrC,EAAQjC,UACbuE,QAAQ,QACRT,QAAS,kBACPX,EAA2BlB,EAAQjC,UAAW,KAGhD,8BACE,kBAACwE,EAAA,EAAD,CACEC,MAAI,EACJF,QAAQ,OACRb,UAAU,iCAETzB,EAAQjC,UACT,0BAAMiE,MAAO,CAAES,YAAa,aAIlC,kBAACb,EAAA,EAAD,CACEU,QAAQ,QACRT,QAAS,kBAAMR,EAAoBrB,EAAQjC,aAE3C,kBAAC,IAAD,CAAiB2E,KAAMC,aAMhC/B,EAAgBF,mBACf,kBAAC,IAAMqB,SAAP,KACE,kBAAC,EAAD,CACEhE,UAAW6C,EAAgBF,sBAMnC,yBAAKe,UAAU,YACb,yBAAKA,UAAU,2BACZhC,EAAYqC,KAAI,SAAC9B,GAAD,OACf,kBAAC,IAAM+B,SAAP,KACE,yBACEC,MAAO,CACLC,OAAQ,oBACRC,aAAc,EACdC,QAAS,EACTC,OAAQ,IAGV,kBAACR,EAAA,EAAD,CACES,IAAKrC,EAAQjC,UACbuE,QAAQ,QACRT,QAAS,kBACPX,EAA2BlB,EAAQjC,UAAW,KAGhD,8BACE,kBAACwE,EAAA,EAAD,CACEC,MAAI,EACJF,QAAQ,OACRb,UAAU,iCAETzB,EAAQjC,UACT,0BAAMiE,MAAO,CAAES,YAAa,aAIlC,kBAACb,EAAA,EAAD,CACEU,QAAQ,QACRT,QAAS,kBAAMR,EAAoBrB,EAAQjC,aAE3C,kBAAC,IAAD,CAAiB2E,KAAMC,aAMhC/B,EAAgBD,mBACf,kBAAC,IAAMoB,SAAP,KACE,kBAAC,EAAD,CACEhE,UAAW6C,EAAgBD,wBAQxB,YAAhBH,GACC,kBAAC,IAAMuB,SAAP,KACE,yBAAKN,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,2BACZhC,EAAYqC,KAAI,SAAC9B,GAAD,OACf,kBAAC,IAAM+B,SAAP,KACE,yBACEC,MAAO,CACLC,OAAQ,oBACRC,aAAc,EACdC,QAAS,EACTC,OAAQ,IAGV,kBAACR,EAAA,EAAD,CACES,IAAKrC,EAAQjC,UACbuE,QAAQ,QACRT,QAAS,kBACPT,EAA6BpB,EAAQjC,UAAW,KAGlD,8BACE,kBAACwE,EAAA,EAAD,CACEC,MAAI,EACJF,QAAQ,OACRb,UAAU,iCAETzB,EAAQjC,UACT,0BAAMiE,MAAO,CAAES,YAAa,aAIlC,kBAACb,EAAA,EAAD,CACEU,QAAQ,QACRT,QAAS,kBAAMR,EAAoBrB,EAAQjC,aAE3C,kBAAC,IAAD,CAAiB2E,KAAMC,aAMhC5B,EAAkBL,mBACjB,kBAAC,IAAMqB,SAAP,KACE,kBAAC,EAAD,CACEhE,UAAWgD,EAAkBL,sBAMrC,yBAAKe,UAAU,YACb,yBAAKA,UAAU,2BACZhC,EAAYqC,KAAI,SAAC9B,GAAD,OACf,kBAAC,IAAM+B,SAAP,KACE,yBACEC,MAAO,CACLC,OAAQ,oBACRC,aAAc,EACdC,QAAS,EACTC,OAAQ,IAGV,kBAACR,EAAA,EAAD,CACES,IAAKrC,EAAQjC,UACbuE,QAAQ,QACRT,QAAS,kBACPT,EAA6BpB,EAAQjC,UAAW,KAGlD,8BACE,kBAACwE,EAAA,EAAD,CACEC,MAAI,EACJF,QAAQ,OACRb,UAAU,iCAETzB,EAAQjC,UACT,0BAAMiE,MAAO,CAAES,YAAa,aAIlC,kBAACb,EAAA,EAAD,CACEU,QAAQ,QACRT,QAAS,kBAAMR,EAAoBrB,EAAQjC,aAE3C,kBAAC,IAAD,CAAiB2E,KAAMC,aAMhC5B,EAAkBJ,mBACjB,kBAAC,IAAMoB,SAAP,KACE,kBAAC,EAAD,CACEhE,UAAWgD,EAAkBJ,sBAKrC,yBAAKc,UAAU,YACb,yBAAKA,UAAU,2BACZhC,EAAYqC,KAAI,SAAC9B,GAAD,OACf,kBAAC,IAAM+B,SAAP,KACE,yBACEC,MAAO,CACLC,OAAQ,oBACRC,aAAc,EACdC,QAAS,EACTC,OAAQ,IAGV,kBAACR,EAAA,EAAD,CACES,IAAKrC,EAAQjC,UACbuE,QAAQ,QACRT,QAAS,kBACPT,EAA6BpB,EAAQjC,UAAW,KAGlD,8BACE,kBAACwE,EAAA,EAAD,CACEC,MAAI,EACJF,QAAQ,OACRb,UAAU,iCAETzB,EAAQjC,UACT,0BAAMiE,MAAO,CAAES,YAAa,aAIlC,kBAACb,EAAA,EAAD,CACEU,QAAQ,QACRT,QAAS,kBAAMR,EAAoBrB,EAAQjC,aAE3C,kBAAC,IAAD,CAAiB2E,KAAMC,aAMhC5B,EAAkBD,qBACjB,kBAAC,IAAMiB,SAAP,KACE,kBAAC,EAAD,CACEhE,UAAWgD,EAAkBD,0BASnB,IAAvBrB,EAAYd,QAAgB,2BCjZtBiE,EAlCD,WACZ,IAAM/C,EAAmBC,cA0BzB,OAxBA3B,qBAAU,WAqBRnB,GAAa,SAACJ,GAAD,OApBY,SAACA,GACxBM,QAAQC,IAAI,sBACZ,IAAMmE,EAAqBnB,KAAKoB,MAAM3E,GACtC,GACE0E,EAAchD,QACdgD,EAAc/C,UACd+C,EAAcvD,UACd,CACA,IAAMP,EAAmB,CACvBX,KAAMyE,EAAczE,KACpByB,OAAQgD,EAAchD,OACtBC,SAAU+C,EAAc/C,SACxBR,UAAWuD,EAAcvD,WAG3B,OAAO8B,EAAiBlD,EAAYa,IAGtC,OAAO,KAEyBgE,CAAiB5E,QAClD,CAACiD,IAGF,kBAAC,WAAD,KACE,kBAAC,EAAD,QCxBAgD,EAA+C,SACnDjG,GADmD,MAE/C,CACJC,KLjBgC,qBKkBhCD,QAASA,I,2BCmEIkG,EArEyB,SAAC,GAAmB,IAAD,IAAhB/E,EAAgB,EAAhBA,UACjC0B,EAAgBC,aAAY,SAACC,GAAD,OAAqBA,EAAMhC,gBAAvD8B,YACFsD,EAAmBjD,cAFgC,EAIb9B,qBAJa,mBAIlDC,EAJkD,KAIlCC,EAJkC,KAKnD6B,EAAe,SAACC,GAAD,OACnBA,EAAQjC,YAAcA,GAExBI,qBAAU,WACR,IAAM8B,EAAkBR,EAAYS,UAAUH,GAC9C7B,EAAkBuB,EAAYQ,IAE1BhC,GAAgB+E,EAAQ/E,EAAeT,MAc3CG,GAAa,SAACf,GAAD,OAZY,SAACA,GAExB,IAAM0E,EAAqBnB,KAAKoB,MAAM3E,GAGtC,MAAgC,kBAArB0E,EAAc,GAChByB,EDhB4C,SACzDnG,GADyD,MAErD,CACJC,KLpBkC,uBKqBlCD,QAASA,GCYqBqG,CAAkB3B,IAIrCyB,EAAiBF,EAAYvB,IAEJE,CAAiB5E,QAClD,CAACmB,IAEJ,IAAMiF,EAAU,SAACpG,GACf,IAAIY,EAAe,GACnB,IAAK,IAAM6E,KAAOzF,EAChBM,QAAQC,IAAI,cAAeP,EAAQyF,IAC/BzF,EAAQyF,KAAM7E,GAAI,kBAAe6E,EAAf,YAAsBzF,EAAQyF,GAA9B,UAGxB,OAAO7E,EAAI,cAAUA,EAAV,SAAwB,IAGrC,OACE,kBAAC,WAAD,KACE,kBAAC0F,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACf,QAAQ,QACpC,+BACE,mCACGrE,QADH,IACGA,GADH,UACGA,EAAgBqF,cADnB,aACG,EAAwBxB,KACvB,SAACyB,GAAD,OACEA,GACE,kBAAC,IAAMxB,SAAP,CAAgBM,IAAKkB,GACnB,4BAAKA,SAMjB,sCACGtF,QADH,IACGA,GADH,UACGA,EAAgBT,YADnB,aACG,EAAsBsE,KACrB,SAAC0B,GAAD,OACEA,EAAMC,IACJ,kBAAC,IAAM1B,SAAP,CAAgBM,IAAKmB,EAAMC,IACxBlC,IAAMyB,EAAQQ,YCClBV,EAjEO,WAAO,IACnBrD,EAAgBC,aAAY,SAACC,GAAD,OAAqBA,EAAMhC,gBAAvD8B,YADkB,EAEkBzB,qBAFlB,mBAEnBC,EAFmB,KAEHC,EAFG,KAGpB6E,EAAmBjD,cAYzB,OACE,kBAAC,WAAD,KACE,yBAAK2B,UAAU,QACb,6BACE,6DAEF,yBAAKA,UAAU,YACZhC,EAAYqC,KAAI,SAAC9B,GAAD,OACf,kBAAC,IAAM+B,SAAP,KACE,yBACEC,MAAO,CACLC,OAAQ,oBACRC,aAAc,EACdC,QAAS,EACTC,OAAQ,IAGV,kBAACR,EAAA,EAAD,CACES,IAAKrC,EAAQjC,UACbuE,QAAQ,QACRT,QAAS,kBA9BS9D,EA8BsBiC,EAAQjC,UA7BvDG,EAAkBH,GADM,IAACA,IAgClB,8BACE,kBAACwE,EAAA,EAAD,CACEC,MAAI,EACJF,QAAQ,OACRb,UAAU,iCAETzB,EAAQjC,UACT,0BAAMiE,MAAO,CAAES,YAAa,aAIlC,kBAACb,EAAA,EAAD,CACEU,QAAQ,QACRT,QAAS,kBA1CI9D,EA0CsBiC,EAAQjC,UAxCvDgF,EFQA,CACJlG,KLxBkC,uBKyBlCD,QEVwCmB,IACpCG,OAAkBE,GAHM,IAACL,IA4Cb,kBAAC,IAAD,CAAiB2E,KAAMC,aAMhC1E,GAAkB,kBAACyF,EAAD,CAAkB3F,UAAWE,IACxB,IAAvBwB,EAAYd,QAAgB,2BCtBtBgF,EArCE,WAEf,IAAMZ,EAAmBjD,cA4BzB,OAjBA3B,qBAAU,WAcRR,GAAa,SAACf,GAAD,OAbY,SAACA,GACxB,IAAM0E,EAAqBnB,KAAKoB,MAAM3E,GACtCM,QAAQC,IAAI,2BAEZ,IAAMyG,EAAyB,CAC7B7F,UAAWuD,EAAcvD,UACzBP,KAAM8D,EAAcuC,SAGtB,OAAOd,EAAiBF,EAAYe,IAIJpC,CAAiB5E,QAClD,CAACmG,IAGF,kBAAC,WAAD,KACE,kBAAC,EAAD,Q,SCvCOe,EAAmB,CAC9B,CACEC,UAAW,YACXC,MAAO,KAET,CACED,UAAW,gBACXC,MAAO,kBAET,CACED,UAAW,eACXC,MAAO,iBAET,CACED,UAAW,iBACXC,MAAO,mBAET,CACED,UAAW,gBACXC,MAAO,kBAET,CACED,UAAW,mBACXC,MAAO,qBAET,CACED,UAAW,iBACXC,MAAO,oBAIEC,EACI,gBADJA,EAEG,eAFHA,EAGK,iBAHLA,EAII,gBAJJA,EAKA,YALAA,EAMO,mBANPA,EAOK,iBCIHC,EA1CF,WACX,IAAMC,EAAUC,cACVC,EAAc,SAACN,GACnB,IAAMC,EAAQF,EAAOQ,MAAK,SAACN,GAAD,OAAWA,EAAMD,YAAcA,KACzD,OAAOI,EAAQI,KAAKP,EAAQA,EAAMA,MAAQ,KAE5C,OACE,kBAAC,WAAD,KACE,yBAAKvC,UAAU,cACb,yBACEA,UAAU,2BACVO,MAAO,CAAEvD,gBAAiB,YAE1B,kBAAC+F,EAAA,EAAD,CAAa/C,UAAU,QACrB,kBAACG,EAAA,EAAD,CAAQC,QAAS,kBAAMwC,EAAYJ,KAAnC,QAGA,kBAACrC,EAAA,EAAD,CAAQC,QAAS,kBAAMwC,EAAYJ,KAAnC,kBAGA,kBAACrC,EAAA,EAAD,CAAQC,QAAS,kBAAMwC,EAAYJ,KAAnC,gBAGA,kBAACrC,EAAA,EAAD,CAAQC,QAAS,kBAAMwC,EAAYJ,KAAnC,iBAGA,kBAACrC,EAAA,EAAD,CAAQC,QAAS,kBAAMwC,EAAYJ,KAAnC,iBAGA,kBAACrC,EAAA,EAAD,CAAQC,QAAS,kBAAMwC,EAAYJ,KAAnC,oBAGA,kBAACrC,EAAA,EAAD,CAAQC,QAAS,kBAAMwC,EAAYJ,KAAnC,uBCzBNQ,EAA2D,SAC/D7H,GAD+D,MAE3D,CACJC,KXSkC,uBWRlCD,QAASA,ICkCI8H,EArC2B,SAAC,GAAmB,IAAjB3G,EAAgB,EAAhBA,UACnCP,EAASkC,aAAY,SAACC,GAAD,OAAqBA,EAAMjC,eAAhDF,KACFmH,EAAyB7E,cAF4B,EAMf9B,qBANe,mBAMpDC,EANoD,KAMpCC,EANoC,KAwB3D,OAhBAC,qBAAU,WACR,IAGM8B,EAAkBzC,EAAK0C,WAHR,SAACF,GAAD,OACnBA,EAAQjC,YAAcA,KAIxBG,EAAkBV,EAAKyC,IAOvBvC,GAAY,SAACd,GAAD,OALa,SAACA,GACxB,IAAM0E,EAAqBnB,KAAKoB,MAAM3E,GACtC,OAAO+H,EAAuBF,EAAkBnD,IAGjBE,CAAiB5E,QACjD,CAACmB,EAAWP,EAAMmH,IAGnB,kBAAC,WAAD,KACE,yBACEC,wBAAyB,CACvBC,OAAQ5G,EACJA,EAAe6G,YADG,uCC0CjBC,EAtEa,WAAO,IACzBvH,EAASkC,aAAY,SAACC,GAAD,OAAqBA,EAAMjC,eAAhDF,KADwB,EAEYQ,qBAFZ,mBAEzBC,EAFyB,KAETC,EAFS,KAG1ByG,EAAyB7E,cAe/B,OACE,kBAAC,WAAD,KACE,yBAAK2B,UAAU,QACb,6BACE,6DAEF,yBAAKA,UAAU,YACZjE,EAAKsE,KAAI,SAAC9B,GAAD,OACR,kBAAC,IAAM+B,SAAP,CAAgBM,IAAKrC,EAAQjC,WAC3B,yBACEiE,MAAO,CACLC,OAAQ,oBACRC,aAAc,EACdC,QAAS,EACTC,OAAQ,IAGV,kBAACR,EAAA,EAAD,CACES,IAAKrC,EAAQjC,UACbuE,QAAQ,QACRT,QAAS,kBA/BS9D,EA+BsBiC,EAAQjC,UA9BvDG,EAAkBH,GADM,IAACA,IAiClB,8BACE,kBAACwE,EAAA,EAAD,CACEC,MAAI,EACJF,QAAQ,OACRb,UAAU,iCAETzB,EAAQjC,UACT,0BAAMiE,MAAO,CAAES,YAAa,aAIlC,kBAACb,EAAA,EAAD,CACEU,QAAQ,QACRT,QAAS,kBA1CI9D,EA0CsBiC,EAAQjC,UAxCvD4G,EFJA,CACJ9H,KXIyC,8BWHzCD,QEEoDmB,IAChDG,OAAkBE,GAHM,IAACL,IA4Cb,kBAAC,IAAD,CAAiB2E,KAAMC,aAMhC1E,GACC,kBAAC+G,EAAD,CAAwBjH,UAAWE,IAEpB,IAAhBT,EAAKmB,QAAgB,2BC7BfsG,EAtCK,WAElB,IAAMC,EAAsBpF,cA6B5B,OAlBA3B,qBAAU,WAgBRT,GAAY,SAACd,GAAD,OAfa,SAACA,GACxBM,QAAQC,IAAI,aAAcP,GAC1B,IAAM0E,EAAqBnB,KAAKoB,MAAM3E,GAEtC,GADAM,QAAQC,IAAI,qBAAsBgD,KAAKC,UAAUkB,EAAc9D,OAC3D8D,EAAcvD,UAAW,CAC3B,IAAMnB,EAA+B,CACnCmB,UAAWuD,EAAcvD,UACzB+G,YAAaxD,EAAc6D,MAG7BjI,QAAQC,IAAI,UAAWgD,KAAKC,UAAUxD,IACtCsI,EAAoBT,EAAkB7H,IAExC,OAAO,KAEwB4E,CAAiB5E,QACjD,CAACsI,IAEF,kBAAC,WAAD,KACE,kBAACE,EAAD,QC/BAC,EAA+D,SACnEzI,GADmE,MAE/D,CACJC,KfEoC,yBeDpCD,QAASA,ICiDI0I,EAlDoC,SAAC,GAAmB,IAAD,EAAhBvH,EAAgB,EAAhBA,UAC5CwH,EAAa7F,aAAY,SAACC,GAAD,OAAqBA,EAAMlC,iBAApD8H,SACFC,EAA2B1F,cAFmC,EAMxB9B,qBANwB,mBAM7DC,EAN6D,KAM7CC,EAN6C,KAO9D6B,EAAe,SAACC,GAAD,OACnBA,EAAQjC,YAAcA,GAExBI,qBAAU,WACR,IAAM8B,EAAkBsF,EAASrF,UAAUH,GAC3C7B,EAAkBqH,EAAStF,IAQ3BxC,GAAc,SAACb,GAAD,OAPW,SAACA,GAExB,IAAM0E,EAAqBnB,KAAKoB,MAAM3E,GAGtC,OAAO4I,EAAyBH,EAAoB/D,IAEnBE,CAAiB5E,QACnD,CAACmB,IAWJ,OACE,kBAAC,WAAD,KACE,kBAACmF,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACf,QAAQ,QACpC,sCACGrE,QADH,IACGA,GADH,UACGA,EAAgBT,YADnB,aACG,EAAsBsE,KACrB,SAAC0B,GAAD,OACEA,EAAMC,IACJ,kBAAC,IAAM1B,SAAP,CAAgBM,IAAKmB,EAAMC,IACzB,4BAjBA,SAAC7G,GACf,IAAIY,EAAc,GAClB,IAAK,IAAM6E,KAAOzF,EACJ,OAARyF,GAAc7E,EAAK+G,KAAK,wBAAIlC,IAAKA,GAAMzF,EAAQyF,GAAKoD,aAG1D,OAAOjI,EAAKsE,KAAI,SAAC0B,GAAD,OAAWA,KAWRR,CAAQQ,YC2BhBkC,EArEe,WAAO,IAC3BH,EAAa7F,aAAY,SAACC,GAAD,OAAqBA,EAAMlC,iBAApD8H,SAD0B,EAEUvH,qBAFV,mBAE3BC,EAF2B,KAEXC,EAFW,KAG5BsH,EAA2B1F,cAcjC,OACE,kBAAC,WAAD,KACE,yBAAK2B,UAAU,QACb,6BACE,6DAEF,yBAAKA,UAAU,YACZ8D,EAASzD,KAAI,SAAC9B,GAAD,OACZ,kBAAC,IAAM+B,SAAP,KACE,yBACEC,MAAO,CACLC,OAAQ,oBACRC,aAAc,EACdC,QAAS,EACTC,OAAQ,IAGV,kBAACR,EAAA,EAAD,CACES,IAAKrC,EAAQjC,UACbuE,QAAQ,QACRT,QAAS,kBA9BS9D,EA8BsBiC,EAAQjC,UA7BvDG,EAAkBH,GADM,IAACA,IAgClB,8BACE,kBAACwE,EAAA,EAAD,CACEC,MAAI,EACJF,QAAQ,OACRb,UAAU,iCAETzB,EAAQjC,UACT,0BAAMiE,MAAO,CAAES,YAAa,aAIlC,kBAACb,EAAA,EAAD,CACEU,QAAQ,QACRT,QAAS,kBA1CI9D,EA0CsBiC,EAAQjC,UAxCvDyH,EFHA,CACJ3I,KfH2C,gCeI3CD,QECwDmB,IACpDG,OAAkBE,GAHM,IAACL,IA4Cb,kBAAC,IAAD,CAAiB2E,KAAMC,aAMhC1E,GACC,kBAAC,EAAD,CAA0BF,UAAWE,IAElB,IAApBsH,EAAS5G,QAAgB,2BCVnBgH,EA/CO,WAEpB,IAAMC,EAAwB9F,cAsC9B,OAzBA3B,qBAAU,WAsBRV,GAAc,SAACb,GAAD,OArBW,SAACA,GACxBM,QAAQC,IAAI,aAAcP,GAC1B,IAAM0E,EAAqBnB,KAAKoB,MAAM3E,GAEtC,GADAM,QAAQC,IAAI,qBAAsBgD,KAAKC,UAAUkB,EAAc9D,OAC3D8D,EAAcvD,UAAW,CAC3B,IAAMnB,EAAiC,CACrCmB,UAAWuD,EAAcvD,UACzBP,KAAM,CACJ,CACEiG,GAAInC,EAAc9D,KAAK,GAAGiG,GAC1BoC,YAAavE,EAAc9D,KAAK,GAAGqI,YACnCC,YAAaxE,EAAc9D,KAAK,GAAGsI,eAKzC5I,QAAQC,IAAI,UAAWgD,KAAKC,UAAUxD,IACtCgJ,EAAsBP,EAAoBzI,IAE5C,OAAO,KAE0B4E,CAAiB5E,QACnD,CAACgJ,IAGF,kBAAC,WAAD,KACE,kBAACG,EAAD,QC2BSC,EA1EiB,WAAO,IAC7BxI,EAASkC,aAAY,SAACC,GAAD,OAAqBA,EAAMsG,mBAAhDzI,KAD4B,EAEQQ,qBAFR,mBAE7BC,EAF6B,KAEbC,EAFa,KAG9BgI,EAA0BpG,cAehC,OACE,kBAAC,WAAD,KACE,yBAAK2B,UAAU,QACb,6BACE,gEAEF,yBAAKA,UAAU,YACZjE,EAAKsE,KAAI,SAAC9B,GAAD,OACR,kBAAC,IAAM+B,SAAP,CAAgBM,IAAKrC,EAAQjC,WAC3B,yBACEiE,MAAO,CACLC,OAAQ,oBACRC,aAAc,EACdC,QAAS,EACTC,OAAQ,IAGV,kBAACR,EAAA,EAAD,CACES,IAAKrC,EAAQjC,UACbuE,QAAQ,QACRT,QAAS,kBA/BS9D,EA+BsBiC,EAAQjC,UA9BvDG,EAAkBH,GADM,IAACA,IAiClB,8BACE,kBAACwE,EAAA,EAAD,CACEC,MAAI,EACJF,QAAQ,OACRb,UAAU,iCAETzB,EAAQjC,UACT,0BAAMiE,MAAO,CAAES,YAAa,aAIlC,kBAACb,EAAA,EAAD,CACEU,QAAQ,QACRT,QAAS,kBA1CI9D,EA0CsBiC,EAAQjC,UAxCvDmI,ECNA,CACJrJ,KpBaA,kCoBZAD,QDIyDmB,IACrDG,OAAkBE,GAHM,IAACL,IA4Cb,kBAAC,IAAD,CAAiB2E,KAAMC,aAMhC1E,GACC,kBAAC,IAAM8D,SAAP,KACE,kBAACiD,EAAD,CAAwBjH,UAAWE,IACnC,kBAAC,EAAD,CAAkBF,UAAWE,IAC7B,kBAACyF,EAAD,CAAkB3F,UAAWE,KAGhB,IAAhBT,EAAKmB,QAAgB,2BE3CfwH,EA9BY,WACzB,IAAMD,EAA0BpG,cAsBhC,OAlBA3B,qBAAU,YpBkDZ,SAAS8H,EAAgBhJ,GACvBC,QAAQC,IAAI,gCACZL,EAAOM,GAAG,WAAW,WACnB,IACEN,EAAOO,KAAK,OAAQ,UACpBH,QAAQC,IAAI,gBACZ,MAAOG,GACP,OAAO2I,EAAgBhJ,OAG3BH,EAAOM,GAAG,sBAAsB,SAACI,GAAD,OAAeP,EAAGO,MoB7ChDyI,EAAgB,SAACrJ,GAAD,OAdS,SAACA,GACxB,IAAM0E,EAAqBnB,KAAKoB,MAAM3E,GACtCM,QAAQC,IAAI,2BAEZ,IAAMyG,EAAsC,CAC1C7F,UAAWuD,EAAcvD,UACzBqI,KAAM9E,EAAc8E,KACpBC,qBAAsB/E,EAAcgF,OAGtC,OAAOJ,EDdsD,SACjEtJ,GADiE,MAE7D,CACJC,KpBiBsC,2BoBhBtCD,QAASA,GCU0B2J,CAAmB3C,IAIfpC,CAAiB5E,QACrD,CAACsJ,IAGF,kBAAC,WAAD,KACE,kBAAC,EAAD,QCgDSF,GAlEwD,SAAC,GAEjE,IADLQ,EACI,EADJA,SAEQ/G,EAAgBC,aAAY,SAACC,GAAD,OAAqBA,EAAM8G,iBAAvDhH,YACFiH,EAAwB5G,cAa9B,OACE,kBAAC,WAAD,KACE,yBAAK2B,UAAU,QACb,6BACE,8DAEF,yBAAKA,UAAU,YACZhC,EAAYqC,KAAI,SAAC9B,GAAD,OACf,kBAAC,IAAM+B,SAAP,CAAgBM,IAAKrC,EAAQjC,WAC3B,yBACEiE,MAAO,CACLC,OAAQ,oBACRC,aAAc,EACdC,QAAS,EACTC,OAAQ,IAGV,kBAACR,EAAA,EAAD,CACES,IAAKrC,EAAQjC,UACbuE,QAAQ,QACRT,QAAS,kBA/BS9D,EA+BsBiC,EAAQjC,UA9BvDyI,EAASzI,GADe,IAACA,IAiClB,8BACE,kBAACwE,EAAA,EAAD,CACEC,MAAI,EACJF,QAAQ,OACRb,UAAU,iCAETzB,EAAQjC,UACT,0BAAMiE,MAAO,CAAES,YAAa,aAIlC,kBAACb,EAAA,EAAD,CACEU,QAAQ,QACRT,QAAS,kBA1CI9D,EA0CsBiC,EAAQjC,UAxCvD2I,ECRA,CACJ7J,KvBkBuC,4BuBjBvCD,QDMqDmB,IACjDyI,OAASpI,GAHe,IAACL,IA4Cb,kBAAC,IAAD,CAAiB2E,KAAMC,aAMT,IAAvBlD,EAAYd,QAAgB,2BE4BtBgI,GA5EO,WACpB,IAAMD,EAAwB5G,cACtBL,EAAgBC,aAAY,SAACC,GAAD,OAAqBA,EAAM8G,iBAAvDhH,YAFkB,EAGkBzB,mBAAS,IAH3B,mBAGnBC,EAHmB,KAGHC,EAHG,OAOtBF,qBAPsB,mBAKxB4I,EALwB,KAMxBC,EANwB,KASpBC,EAA0B,SAAC/I,GAC/B,OAAOG,EAAkBH,IAK3BI,qBAAU,YvBiCZ,SAAS4I,EAAa9J,GACpBC,QAAQC,IAAI,gCACZL,EAAOM,GAAG,WAAW,WACnB,IACEN,EAAOO,KAAK,OAAQ,UACpBH,QAAQC,IAAI,gBACZ,MAAOG,GACP,OAAOyJ,EAAa9J,OAGxBH,EAAOM,GAAG,oBAAoB,SAACI,GAAD,OAAeP,EAAGO,MuB5B9CuJ,EAAa,SAACnK,GAAD,OAdY,SAACA,GACxBM,QAAQC,IAAI,sBACZ,IAAMmE,EAAqBnB,KAAKoB,MAAM3E,GACtC,GAAI0E,EAAcvD,UAAW,CAC3B,IAAMP,EAA8B,CAClCO,UAAWuD,EAAcvD,UACzBP,KAAM8D,EAAc9D,MAGtB,OAAOkJ,EDzCmD,SAChE9J,GADgE,MAE5D,CACJC,KvB2BoC,yBuB1BpCD,QAASA,GCqC0BoK,CAAoBxJ,IAGnD,OAAO,KAEyBgE,CAAiB5E,QAClD,CAAC8J,IAEJ,IAAM3G,EAAe,SAACC,GAAD,OACnBA,EAAQjC,YAAcE,GAExBE,qBAAU,WACR,IAAM8B,EAAkBR,EAAYS,UAAUH,GAC9C7C,QAAQC,IAAI,YAAagD,KAAKC,UAAUX,EAAYQ,KAEpD,IAAMrD,EAAiC6C,EAAYQ,GACnD4G,EAAsBjK,GAEtBM,QAAQC,IAAI,wBACX,CAACuJ,EAAuBzI,IAW3B,OACE,kBAAC,WAAD,KACE,kBAAC,IAAM8D,SAAP,KACE,kBAACkF,GAAD,CAAuBT,SAAUM,KAEnC,kBAAC,IAAM/E,SAAP,KACE,kCACG6E,QADH,IACGA,OADH,EACGA,EAAoBpJ,KAAKsE,KACxB,SAAC0B,GAAD,OACEA,EAAMC,IACJ,kBAAC,IAAM1B,SAAP,CAAgBM,IAAKmB,EAAMC,IACzB,6BApBA,SAAC7G,GACf,IAAIY,EAAc,GAClB,IAAK,IAAM6E,KAAOzF,EACJ,OAARyF,GAAc7E,EAAK+G,KAAK,uBAAGlC,IAAKA,GAAMzF,EAAQyF,GAAKoD,aAGzD,OAAOjI,EAAKsE,KAAI,SAAC0B,GAAD,OAAWA,KAcPR,CAAQQ,YC9DjB0D,OAnBf,WACE,OACE,kBAAC,IAAMnF,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KAGE,kBAAC,IAAD,CAAOoF,KAAK,kBAAkBC,OAAK,EAACC,UAAW1B,IAC/C,kBAAC,IAAD,CAAOwB,KAAK,gBAAgBC,OAAK,EAACC,UAAWpC,IAC7C,kBAAC,IAAD,CAAOkC,KAAK,iBAAiBC,OAAK,EAACC,UAAWC,IAC9C,kBAAC,IAAD,CAAOH,KAAK,iBAAiBC,OAAK,EAACC,UAAWE,IAC9C,kBAAC,IAAD,CAAOJ,KAAK,oBAAoBC,OAAK,EAACC,UAAWG,IACjD,kBAAC,IAAD,CAAOL,KAAK,kBAAkBC,OAAK,EAACC,UAAWV,KAC/C,kBAAC,IAAD,CAAOQ,KAAK,IAAIC,OAAK,EAACC,UAAWE,OCdrBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iCCLOC,GAAyC,CACpDrI,YAAa,CACX,CACE1B,UAAW,IACXuF,OAAQ,CAAC,KAAM,YAAa,WAAY,UAAW,YACnD9F,KAAM,CACJ,CACEuK,EAAG,eACHC,UAAW,IAAIC,KACfC,SAAU,MACVC,QAAS,KACTC,SAAU,QAEZ,CACEL,EAAG,kBACHC,UAAW,IAAIC,KACfC,SAAU,MACVC,QAAS,KACTC,SAAU,UAIhB,CACErK,UAAW,IACXuF,OAAQ,CAAC,IAAK,YAAa,WAAY,UAAW,YAClD9F,KAAM,CACJ,CACEuK,EAAG,eACHC,UAAW,IAAIC,KACfC,SAAU,MACVC,QAAS,KACTC,SAAU,QAEZ,CACEL,EAAG,kBACHC,UAAW,IAAIC,KACfC,SAAU,MACVC,QAAS,KACTC,SAAU,QAEZ,CACEL,EAAG,iBACHC,UAAW,IAAIC,KACfC,SAAU,MACVC,QAAS,KACTC,SAAU,QAEZ,CACEL,EAAG,sBACHC,UAAW,IAAIC,KACfC,SAAU,MACVC,QAAS,KACTC,SAAU,Y,SC9CPC,GAAyC,CACpD5I,YAAa,CACX,CACE5C,KAAM,MACNyB,OAAQ,CACN,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAEFP,UAAW,IACXQ,SAAU,CACRC,MAAO,gBACPhB,KAAM,CAAC,KAAM,KAAM,IAAK,IAAK,IAAK,IAAK,KAAM,IAAK,IAAK,IAAK,IAAK,UCzBnE8K,GAA4C,CAChD/C,SAAU,CACR,CACExH,UAAW,IACXP,KAAM,CACJ,CAAEiG,GAAI,IAAKoC,YAAa,QAASC,YAAa,IAC9C,CAAErC,GAAI,IAAKoC,YAAa,QAASC,YAAa,gBAC9C,CAAErC,GAAI,IAAKoC,YAAa,MAAOC,YAAa,wBCVvCuC,GAA2C,CACtD7K,KAAM,CACJ,CACEO,UAAW,IACX+G,YAAY,kFCJZyD,GAAqD,CACzD/K,KAAM,CACJ,CACEO,UAAW,IACXqI,KAAM,EACNC,qBAAsB,CACpB,CACExJ,KAAM,GACNkB,UAAW,QCbfyK,GAAiD,CACrD/I,YAAa,ICSAgJ,GATKC,2BAAgB,CAClC/K,aN+DiC,WASZ,IARrBgC,EAQoB,uDARKmI,GACzBa,EAOoB,uCACZ9L,EAAkB8L,EAAlB9L,KAAMD,EAAY+L,EAAZ/L,QAERgM,EAAehM,EACfiM,EAAuBjM,EAG7B,OAAQC,GACN,I3BxF8B,qB2ByF5BK,QAAQC,IAAI,wBAAyBgD,KAAKC,UAAUwI,IAEpD,IAAIE,EAAYnJ,EAAMF,YAEtB,GACEE,EAAMF,YAAY6E,MAChB,SAACtE,GAAD,OAAaA,EAAQjC,YAAc6K,EAAa7K,aAElD,CAAC,IAAD,IACAb,QAAQC,IAAI,oBAEZ,IAAM4C,EAAe,SAACC,GAAD,OACnBA,EAAQjC,aAAR,OAAsB6K,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAc7K,YAChCgL,EAAYpJ,EAAMF,YAAYS,UAAUH,GAExCiJ,EAAyBF,EAAUC,GAmBzC,OAhBA,UAAAH,EAAapL,YAAb,SAAmByL,SAAQ,SAACzL,GAAD,OAAUwL,EAAWxL,KAAK+G,KAAK/G,MAG1D,UAAAwL,EAAWxL,YAAX,SAAiByL,SAAQ,SAACC,GAExB,IAAIC,EACJ,IAAKA,KAFLjM,QAAQC,IAAI,mBAEC+L,EACPC,IACGH,EAAW1F,OAAQgB,MAAK,SAAC8E,GAAD,OAAWA,IAAUD,OAChDjM,QAAQC,IAAI,oBACZ6L,EAAW1F,OAAQiB,KAAK4E,QAIhCL,EAAUC,GAAaC,EACvB9L,QAAQC,IAAI,eAAgBgD,KAAKC,UAAU0I,EAAUC,KAC9C,2BAAKpJ,GAAZ,IAAmBF,YAAaqJ,IAEhC,IAAME,EAAyB,CAC7BjL,UAAW6K,EAAa7K,UACxBP,KAAMoL,EAAapL,KACnB8F,OAAQ,CAAC,KAgBX,OAdK0F,EAAW1F,SAAQ0F,EAAW1F,OAAS,CAAC,KAE7C0F,EAAWxL,KAAKyL,SAAQ,SAACC,GACvB,IAAIC,EAEJ,IAAKA,KAAQD,EACPC,IACGH,EAAW1F,OAAQgB,MAAK,SAAC8E,GAAD,OAAWA,IAAUD,OAChDjM,QAAQC,IAAI,oBACZ6L,EAAW1F,OAAQiB,KAAK4E,QAIhCL,EAAUvE,KAAKyE,GACR,2BAAKrJ,GAAZ,IAAmBF,YAAaqJ,IAGpC,I3B7IgC,uB2B8I9B,IAAMO,EAAW1J,EAAMF,YAAY6J,QACjC,SAACtJ,GAAD,OAAaA,EAAQjC,YAAc8K,KAGrC,OAAO,2BAAKlJ,GAAZ,IAAmBF,YAAa4J,IAElC,QACE,OAAO1J,IMlJXC,aLoCiC,WAMZ,IALrBD,EAKoB,uDALK0I,GACzBM,EAIoB,uCACZ9L,EAAkB8L,EAAlB9L,KAAMD,EAAY+L,EAAZ/L,QAER2M,EAAmB3M,EACnB4M,EAAkB5M,EAExB,OAAQC,GACN,I5BhD0B,iB4BkDxB,GADAK,QAAQC,IAAI,wBAAyBgD,KAAKC,UAAUxD,IAElD+C,EAAMF,YAAY6E,MAChB,SAACtE,GAAD,OAAaA,EAAQjC,aAAR,OAAsBwL,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAkBxL,cAEvD,CACAb,QAAQC,IAAI,qBACZ,IAQE,EARI4C,EAAe,SAACC,GAAD,OACnBA,EAAQjC,aAAR,OAAsBwL,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAkBxL,YACpC0L,EAAW9J,EAAMF,YACjBsJ,EAAYpJ,EAAMF,YAAYS,UAAUH,GAE9C,GACE0J,EAASV,GAAWzK,UAApB,OAA+BiL,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAkBjL,SACjDmL,EAASV,GAAWxK,SAASf,OAAS+L,EAAiBhL,SAASf,KAEhEN,QAAQC,IAAI,8BAEZsM,EAASV,GAAWzK,OAASmL,EAASV,GAAWzK,OAAOoL,OAA3B,OAC3BH,QAD2B,IAC3BA,OAD2B,EAC3BA,EAAkBjL,QAEpBmL,EAASV,GAAWxK,SAASC,MAA7B,OAAqC+K,QAArC,IAAqCA,OAArC,EAAqCA,EAAkBhL,SAASC,MAChEiL,EAASV,GAAWxK,SAASf,KAA7B,UAAoCiM,EAClCV,GACAxK,SAASf,YAFX,aAAoC,EAEnBkM,OAFmB,OAEZH,QAFY,IAEZA,OAFY,EAEZA,EAAkBhL,SAASf,WAC9C,GAAIiM,EAASV,GAAWzK,UAApB,OAA+BiL,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAkBjL,QAC1DpB,QAAQC,IAAI,qBAEZsM,EAASV,GAAWzK,OAASmL,EAASV,GAAWzK,OAAOoL,OAA3B,OAC3BH,QAD2B,IAC3BA,OAD2B,EAC3BA,EAAkBjL,aAEf,GACLmL,EAASV,GAAWxK,SAASf,OAAS+L,EAAiBhL,SAASf,KAChE,CAAC,IAAD,EACAN,QAAQC,IAAI,4BAEZsM,EAASV,GAAWxK,SAASC,MAA7B,OAAqC+K,QAArC,IAAqCA,OAArC,EAAqCA,EAAkBhL,SAASC,MAChEiL,EAASV,GAAWxK,SAASf,KAA7B,UAAoCiM,EAClCV,GACAxK,SAASf,YAFX,aAAoC,EAEnBkM,OAFmB,OAEZH,QAFY,IAEZA,OAFY,EAEZA,EAAkBhL,SAASf,MAGrD,OACEmC,EAAMF,YAAYsJ,GAAWxK,WAAakL,EAASV,GAAWxK,SAEvDoB,EAEF,2BAAKA,GAAZ,IAAmBF,YAAagK,IAElC,OAAO,2BACF9J,GADL,IAEEF,YAAY,GAAD,oBAAME,EAAMF,aAAZ,CAAyB8J,MAGxC,I5BrGgC,uB4BsG9B,IAAMF,EAAW1J,EAAMF,YAAY6J,QACjC,SAACtJ,GAAD,OAAaA,EAAQjC,YAAcyL,KAGrC,OAAO,2BAAK7J,GAAZ,IAAmBF,YAAa4J,IAElC,QACE,OAAO1J,IK/GXlC,cJiBkC,WAMd,IALpBkC,EAKmB,uDALK2I,GACxBK,EAImB,uCACX9L,EAAkB8L,EAAlB9L,KAAMD,EAAY+L,EAAZ/L,QAER+M,EAAoB/M,EACpB4M,EAAkB5M,EAExB,OAAQC,GACN,I7BxBkC,yB6B0BhC,GADAK,QAAQC,IAAI,oCAAqCgD,KAAKC,UAAUxD,IAE9D+C,EAAM4F,SAASjB,MACb,SAACtE,GAAD,OAAaA,EAAQjC,YAAc4L,EAAkB5L,aAEvD,CACA,IAAMgC,EAAe,SAACC,GAAD,OACnBA,EAAQjC,aAAR,OAAsB4L,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAmB5L,YAErC0L,EAAW9J,EAAM4F,SACjBwD,EAAYpJ,EAAM4F,SAASrF,UAAUH,GAI3C,OAHiB,OAAjB4J,QAAiB,IAAjBA,KAAmBnM,KAAKyL,SAAQ,SAACzF,GAAD,OAC9BiG,EAASV,GAAWvL,KAAK+G,KAAKf,MAE5B7D,EAAM4F,SAASwD,GAAWvL,OAASiM,EAASV,GAAWvL,KAClDmC,EACF,2BAAKA,GAAZ,IAAmB4F,SAAUkE,IAE/B,OAAO,2BAAK9J,GAAZ,IAAmB4F,SAAS,GAAD,oBAAM5F,EAAM4F,UAAZ,CAAsBoE,MAEnD,I7B1CyC,gC6B2CvC,IAAMN,EAAW1J,EAAM4F,SAAS+D,QAC9B,SAACtJ,GAAD,OAAaA,EAAQjC,YAAcyL,KAGrC,OAAO,2BAAK7J,GAAZ,IAAmB4F,SAAU8D,IAE/B,QACE,OAAO1J,II1DXjC,YHSgC,WAMT,IALvBiC,EAKsB,uDALK0I,GAC3BM,EAIsB,uCACd9L,EAAkB8L,EAAlB9L,KAAMD,EAAY+L,EAAZ/L,QAERgN,EAAkBhN,EAClB4M,EAAkB5M,EAExB,OAAQC,GACN,I9BVgC,uB8BY9B,GADAK,QAAQC,IAAI,wBAAyBgD,KAAKC,UAAUxD,IAElD+C,EAAMnC,KAAK8G,MACT,SAACtE,GAAD,OAAaA,EAAQjC,aAAR,OAAsB6L,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAiB7L,cAEtD,CACAb,QAAQC,IAAI,qBACZ,IAAM4C,EAAe,SAACC,GAAD,OACnBA,EAAQjC,aAAR,OAAsB6L,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAiB7L,YACnC0L,EAAW9J,EAAMnC,KACjBuL,EAAYpJ,EAAMnC,KAAK0C,UAAUH,GASvC,OAPI0J,EAASV,GAAWjE,eAApB,OAAoC8E,QAApC,IAAoCA,OAApC,EAAoCA,EAAiB9E,eACvD5H,QAAQC,IAAI,8BAEZsM,EAASV,GAAWjE,YAClB2E,EAASV,GAAWjE,aAApB,OAAkC8E,QAAlC,IAAkCA,OAAlC,EAAkCA,EAAiB9E,cAIrDnF,EAAMnC,KAAKuL,GAAWjE,cAAgB2E,EAASV,GAAWjE,YAEnDnF,EAEF,2BAAKA,GAAZ,IAAmBnC,KAAMiM,IAE3B,OAAO,2BACF9J,GADL,IAEEnC,KAAK,GAAD,oBAAMmC,EAAMnC,MAAZ,CAAkBoM,MAG1B,I9BvCuC,8B8BwCrC,IAAMP,EAAW1J,EAAMnC,KAAK8L,QAC1B,SAACtJ,GAAD,OAAaA,EAAQjC,YAAcyL,KAGrC,OAAO,2BAAK7J,GAAZ,IAAmBnC,KAAM6L,IAE3B,QACE,OAAO1J,IG7DXsG,gBFcoC,WAQT,IAP3BtG,EAO0B,uDAPK4I,GAC/BI,EAM0B,uCAClB9L,EAAkB8L,EAAlB9L,KAAMD,EAAY+L,EAAZ/L,QAER+M,EAAoB/M,EACpB4M,EAAkB5M,EAExB,OAAQC,GACN,I/BXoC,2B+BalC,GADAK,QAAQC,IAAI,oCAAqCgD,KAAKC,UAAUxD,IAE9D+C,EAAMnC,KAAK8G,MACT,SAACtE,GAAD,OAAaA,EAAQjC,YAAc4L,EAAkB5L,aAEvD,CACA,IAAMgC,EAAe,SAACC,GAAD,OACnBA,EAAQjC,aAAR,OAAsB4L,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAmB5L,YAErC0L,EAAW9J,EAAMnC,KACjBuL,EAAYpJ,EAAMnC,KAAK0C,UAAUH,GAIvC,OAHiB,OAAjB4J,QAAiB,IAAjBA,KAAmBtD,qBAAqB4C,SAAQ,SAACzF,GAAD,OAC9CiG,EAASV,GAAW1C,qBAAqB9B,KAAKf,MAG9C7D,EAAMnC,KAAKuL,GAAW1C,uBACtBoD,EAASV,GAAW1C,qBAEb1G,EACF,2BAAKA,GAAZ,IAAmBnC,KAAMiM,IAE3B,OAAO,2BAAK9J,GAAZ,IAAmBnC,KAAK,GAAD,oBAAMmC,EAAMnC,MAAZ,CAAkBmM,MAE3C,I/B/BF,kC+BgCI,IAAMN,EAAW1J,EAAMnC,KAAK8L,QAC1B,SAACtJ,GAAD,OAAaA,EAAQjC,YAAcyL,KAGrC,OAAO,2BAAK7J,GAAZ,IAAmBnC,KAAM6L,IAE3B,QACE,OAAO1J,IE5DX8G,cDFkC,WAGT,IAFzB9G,EAEwB,uDAFK6I,GAC7BG,EACwB,uCAChB9L,EAAkB8L,EAAlB9L,KAAMD,EAAY+L,EAAZ/L,QAERiN,EAAiBjN,EACjBiM,EAAuBjM,EAG7B,OAAQC,GACN,IAAK,yBACHK,QAAQC,IACN,+BACAgD,KAAKC,UAAUyJ,IAGjB,IAAIf,EAAYnJ,EAAMF,YAEtB,GACEE,EAAMF,YAAY6E,MAChB,SAACtE,GAAD,OAAaA,EAAQjC,YAAc8L,EAAe9L,aAEpD,CAAC,IAAD,EACAb,QAAQC,IAAI,oBAEZ,IAAM4C,EAAe,SAACC,GAAD,OACnBA,EAAQjC,aAAR,OAAsB8L,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAgB9L,YAClCgL,EAAYpJ,EAAMF,YAAYS,UAAUH,GAExCiJ,EAAoCF,EAAUC,GAMpD,OAHA,UAAAc,EAAerM,YAAf,SAAqByL,SAAQ,SAACzL,GAAD,OAAUwL,EAAWxL,KAAK+G,KAAK/G,MAC5DsL,EAAUC,GAAaC,EACvB9L,QAAQC,IAAI,eAAgBgD,KAAKC,UAAU0I,EAAUC,KAC9C,2BAAKpJ,GAAZ,IAAmBF,YAAaqJ,IAEhC,IAAME,EAAoC,CACxCjL,UAAW8L,EAAe9L,UAC1BP,KAAMqM,EAAerM,MAGvB,OADAsL,EAAUvE,KAAKyE,GACR,2BAAKrJ,GAAZ,IAAmBF,YAAaqJ,IAGpC,IAAK,4BACH,IAAMO,EAAW1J,EAAMF,YAAY6J,QACjC,SAACtJ,GAAD,OAAaA,EAAQjC,YAAc8K,KAGrC,OAAO,2BAAKlJ,GAAZ,IAAmBF,YAAa4J,IAElC,QACE,OAAO1J,M,2CEhEYmK,IAAV,SAAUA,KAAV,kEACb,OADa,SACPC,aAAI,IADG,wCCKf,IAAMC,GAAe,G,aCEfC,GDAC,WACL,IAAMC,EAAiBC,eACjBC,EAAa,CAACF,GAMpB,OAAO,2BACFG,uBACD5B,GACAuB,GACAM,+BAAoBC,mBAAe,WAAf,EAAmBH,MAJ3C,IAMEI,QAASN,EAAeO,IAAIX,MCdlBY,GACdC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,KAAD,KACE,kBAAC,IAAD,CAAUH,MAAOT,IACf,kBAAC,GAAD,SAINa,SAASC,eAAe,SVyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhO,GACLJ,QAAQI,MAAMA,EAAMiO,c","file":"static/js/main.83b56a66.chunk.js","sourcesContent":["import * as types from '../types';\r\nimport { ActionCreator, Action } from 'redux';\r\nimport { IGraphData } from '../reducers/graphPrinterReducer';\r\n\r\n//ITable Actions\r\nexport interface IGraphLogActions extends Action {\r\n  type: types.SET_GRAPH_LOGS | types.DELETE_GRAPH_SESSION;\r\n  payload: IGraphData[] | string;\r\n}\r\n\r\n//ITable Action : Setting logs, caught in saga\r\nconst setGraphLog: ActionCreator<IGraphLogActions> = (\r\n  payload: IGraphData[]\r\n) => ({\r\n  type: types.SET_GRAPH_LOGS,\r\n  payload: payload,\r\n});\r\n\r\n//ITable Action : Setting logs, caught in saga\r\nconst deleteGraphSession: ActionCreator<IGraphLogActions> = (\r\n  payload: string\r\n) => ({\r\n  type: types.DELETE_GRAPH_SESSION,\r\n  payload: payload,\r\n});\r\nexport { setGraphLog, deleteGraphSession };\r\n","// ITableLogs\r\nexport const SET_TABLE_DATA_LOG = 'SET_TABLE_DATA_LOG';\r\nexport type SET_TABLE_DATA_LOG = typeof SET_TABLE_DATA_LOG;\r\n\r\nexport const SET_TABLE_HEADER_LOG = 'SET_TABLE_HEADER_LOG';\r\nexport type SET_TABLE_HEADER_LOG = typeof SET_TABLE_HEADER_LOG;\r\n\r\nexport const DELETE_TABLE_SESSION = 'DELETE_TABLE_SESSION';\r\nexport type DELETE_TABLE_SESSION = typeof DELETE_TABLE_SESSION;\r\n\r\n// IGraphLogs\r\nexport const SET_GRAPH_LOGS = 'SET_GRAPH_LOGS';\r\nexport type SET_GRAPH_LOGS = typeof SET_GRAPH_LOGS;\r\nexport const DELETE_GRAPH_SESSION = 'DELETE_GRAPH_SESSION';\r\nexport type DELETE_GRAPH_SESSION = typeof DELETE_GRAPH_SESSION;\r\n\r\n// Simple Printer Types\r\nexport const SET_SIMPLE_PRINTER_LOG = 'SET_SIMPLE_PRINTER_LOG';\r\nexport type SET_SIMPLE_PRINTER_LOG = typeof SET_SIMPLE_PRINTER_LOG;\r\n\r\nexport const DELETE_SIMPLE_PRINTER_SESSION = 'DELETE_SIMPLE_PRINTER_SESSION';\r\nexport type DELETE_SIMPLE_PRINTER_SESSION = typeof DELETE_SIMPLE_PRINTER_SESSION;\r\n\r\n// Html Printer Types\r\nexport const SET_HTML_PRINTER_LOG = 'SET_HTML_PRINTER_LOG';\r\nexport type SET_HTML_PRINTER_LOG = typeof SET_HTML_PRINTER_LOG;\r\n\r\nexport const DELETE_HTML_PRINTER_SESSION = 'DELETE_HTML_PRINTER_SESSION';\r\nexport type DELETE_HTML_PRINTER_SESSION = typeof DELETE_HTML_PRINTER_SESSION;\r\n\r\n// Combined Printer Types\r\nexport const SET_COMBINED_PRINTER_LOG = 'SET_COMBINED_PRINTER_LOG';\r\nexport type SET_COMBINED_PRINTER_LOG = typeof SET_COMBINED_PRINTER_LOG;\r\n\r\nexport const DELETE_COMBINED_PRINTER_SESSION =\r\n  'DELETE_COMBINED_PRINTER_SESSION';\r\nexport type DELETE_COMBINED_PRINTER_SESSION = typeof DELETE_COMBINED_PRINTER_SESSION;\r\n\r\n// Combined Printer Types\r\nexport const DELETE_CUSTOM_PRINTER_LOG = 'DELETE_CUSTOM_PRINTER_LOG';\r\nexport type DELETE_CUSTOM_PRINTER_LOG = typeof DELETE_CUSTOM_PRINTER_LOG;\r\n\r\nexport const SET_CUSTOM_PRINTER_LOG = 'SET_CUSTOM_PRINTER_LOG';\r\nexport type SET_CUSTOM_PRINTER_LOG = typeof SET_CUSTOM_PRINTER_LOG;\r\n","import openSocket from 'socket.io-client';\r\nconst socket = openSocket('http://localhost:8000');\r\n\r\nfunction spiralLogs(cb: Function) {\r\n  socket.on('connect', function () {\r\n    try {\r\n      socket.emit('room', 'myRoom');\r\n      console.log('entered room');\r\n    } catch (error) {\r\n      return spiralLogs(cb);\r\n    }\r\n  });\r\n  socket.on('setTableHeader', (data: any) => cb(data));\r\n  socket.on('setTableData', (data: any) => cb(data));\r\n}\r\n\r\nfunction spiralGraphs(cb: Function) {\r\n  console.log('inside graph logs');\r\n  socket.on('connect', function () {\r\n    try {\r\n      socket.emit('room', 'myRoom');\r\n      console.log('entered room');\r\n    } catch (error) {\r\n      return spiralLogs(cb);\r\n    }\r\n  });\r\n  socket.on('setGraph', (data: any) => cb(data));\r\n}\r\nfunction simplePrinter(cb: Function) {\r\n  console.log('inside simple logs');\r\n  socket.on('connect', function () {\r\n    try {\r\n      socket.emit('room', 'myRoom');\r\n      console.log('entered room');\r\n    } catch (error) {\r\n      return simplePrinter(cb);\r\n    }\r\n  });\r\n  socket.on('setSimplePrinter', (data: any) => cb(data));\r\n}\r\nfunction htmlPrinter(cb: Function) {\r\n  console.log('inside html logs');\r\n  socket.on('connect', function () {\r\n    try {\r\n      socket.emit('room', 'myRoom');\r\n      console.log('entered room');\r\n    } catch (error) {\r\n      return htmlPrinter(cb);\r\n    }\r\n  });\r\n  socket.on('setHtmlPrinter', (data: any) => cb(data));\r\n}\r\nfunction tablePrinter(cb: Function) {\r\n  console.log('inside table logs');\r\n  socket.on('connect', function () {\r\n    try {\r\n      socket.emit('room', 'myRoom');\r\n      console.log('entered room');\r\n    } catch (error) {\r\n      return tablePrinter(cb);\r\n    }\r\n  });\r\n  socket.on('setTablePrinter', (data: any) => cb(data));\r\n}\r\nfunction combinedPrinter(cb: Function) {\r\n  console.log('inside combined printer logs');\r\n  socket.on('connect', function () {\r\n    try {\r\n      socket.emit('room', 'myRoom');\r\n      console.log('entered room');\r\n    } catch (error) {\r\n      return combinedPrinter(cb);\r\n    }\r\n  });\r\n  socket.on('setCombinedPrinter', (data: any) => cb(data));\r\n}\r\nfunction spiralCustom(cb: Function) {\r\n  console.log('inside combined printer logs');\r\n  socket.on('connect', function () {\r\n    try {\r\n      socket.emit('room', 'myRoom');\r\n      console.log('entered room');\r\n    } catch (error) {\r\n      return spiralCustom(cb);\r\n    }\r\n  });\r\n  socket.on('setCustomPrinter', (data: any) => cb(data));\r\n}\r\n\r\n//   socket.on(\"test\", (timestamp) => cb(null, timestamp));\r\n//   socket.emit(\"test\", timestamp);\r\n// }\r\nexport {\r\n  spiralLogs,\r\n  spiralGraphs,\r\n  simplePrinter,\r\n  htmlPrinter,\r\n  tablePrinter,\r\n  combinedPrinter,\r\n  spiralCustom,\r\n};\r\n\r\n// {\"sessionId\":\"results\",\"label\": \"result 1:\", \"value\":\"1\"}\r\n","import React, { Dispatch, Fragment, useEffect, useState } from 'react';\r\nimport {\r\n  Bar,\r\n  Bubble,\r\n  Doughnut,\r\n  Line,\r\n  Polar,\r\n  Radar,\r\n  Scatter,\r\n} from 'react-chartjs-2';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { IGraphLogActions } from '../../store/actions/graphLogActions';\r\nimport { AppState } from '../../store/reducers';\r\nimport { IGraphData } from '../../store/reducers/graphPrinterReducer';\r\nvar randomColor = require('randomcolor');\r\n\r\ninterface IProps {\r\n  sessionId: string;\r\n}\r\n\r\nconst GraphSessionData: React.FC<IProps> = ({ sessionId }) => {\r\n  const [currentSession, setCurrentSession] = useState<IGraphData>();\r\n\r\n  useEffect(() => {\r\n    if (sessionId === undefined || sessionId === null)\r\n      setCurrentSession(undefined);\r\n  }, [sessionId]);\r\n\r\n  let barState = {\r\n    type: currentSession?.type ? currentSession.type : 'bar',\r\n    data: {\r\n      labels: currentSession?.labels,\r\n      datasets: [\r\n        {\r\n          label: currentSession?.datasets.label,\r\n          data: currentSession?.datasets.data,\r\n          backgroundColor: randomColor({\r\n            count: currentSession?.datasets.data\r\n              ? currentSession?.datasets.data.length\r\n              : 1,\r\n          }),\r\n          borderWidth: 1,\r\n        },\r\n      ],\r\n    },\r\n    options: {\r\n      responsive: true,\r\n      scales: {\r\n        xAxes: [\r\n          {\r\n            ticks: {\r\n              maxRotation: 90,\r\n              minRotation: 80,\r\n            },\r\n            gridLines: {\r\n              offsetGridLines: true, //\r\n            },\r\n          },\r\n          {\r\n            position: 'top',\r\n            ticks: {\r\n              maxRotation: 90,\r\n              minRotation: 80,\r\n            },\r\n            gridLines: {\r\n              offsetGridLines: true, //\r\n            },\r\n          },\r\n        ],\r\n        yAxes: [\r\n          {\r\n            ticks: {\r\n              beginAtZero: true,\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  };\r\n\r\n  const { sessionData } = useSelector((state: AppState) => state.graphPrinter);\r\n  const graphLogDispatch = useDispatch<Dispatch<IGraphLogActions>>();\r\n\r\n  const sessionIndex = (session: IGraphData) =>\r\n    session.sessionId === sessionId ? true : false;\r\n\r\n  useEffect(() => {\r\n    const sessionIndexNew = sessionData.findIndex(sessionIndex);\r\n    console.log('log is = ', JSON.stringify(sessionData[sessionIndexNew])); //working\r\n\r\n    const payload: IGraphData = sessionData[sessionIndexNew]; // not-working\r\n    setCurrentSession(payload);\r\n\r\n    console.log('current session = ');\r\n  }, [graphLogDispatch, sessionId]);\r\n\r\n  return (\r\n    <Fragment>\r\n      {barState.type === 'bar' && (\r\n        <Bar data={barState.data} options={barState.options} />\r\n      )}\r\n      {barState.type === 'line' && (\r\n        <Line data={barState.data} options={barState.options} />\r\n      )}\r\n      {barState.type === 'radar' && (\r\n        <Radar data={barState.data} options={barState.options} />\r\n      )}\r\n      {barState.type === 'doughnut' && (\r\n        <Doughnut data={barState.data} options={barState.options} />\r\n      )}\r\n      {barState.type === 'polarArea' && (\r\n        <Polar data={barState.data} options={barState.options} />\r\n      )}\r\n      {barState.type === 'bubble' && (\r\n        <Bubble data={barState.data} options={barState.options} />\r\n      )}\r\n      {barState.type === 'scatter' && (\r\n        <Scatter data={barState.data} options={barState.options} />\r\n      )}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default GraphSessionData;\r\n","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { Dispatch, Fragment, useEffect, useState } from 'react';\r\nimport { Button, Badge } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { faTimesCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { AppState } from '../../store/reducers';\r\nimport { IGraphData } from '../../store/reducers/graphPrinterReducer';\r\nimport {\r\n  IGraphLogActions,\r\n  deleteGraphSession,\r\n  setGraphLog,\r\n} from '../../store/actions/graphLogActions';\r\nimport { spiralGraphs } from '../../api';\r\nimport GraphSessionData from './GraphSessionData';\r\n\r\nconst GraphSession = () => {\r\n  const { sessionData } = useSelector((state: AppState) => state.graphPrinter);\r\n  const [graphOneSession, setGraphOneSession] = useState<string>(); // 1 graph, 2 graph, 3 graphs\r\n  const graphLogDispatch = useDispatch<Dispatch<IGraphLogActions>>();\r\n  const [graphLayout, setGraphLayout] = useState<string>('1_graph'); // 1 graph, 2 graph, 3 graphs\r\n  const [twoGraphSession, setTwoGraphSession] = useState({\r\n    graphOneSessionId: '',\r\n    graphTwoSessionId: '',\r\n  }); // 1 graph, 2 graph, 3 graphs\r\n  const [threeGraphSession, setThreeGraphSession] = useState({\r\n    graphOneSessionId: '',\r\n    graphTwoSessionId: '',\r\n    graphThreeSessionId: '',\r\n  }); // 1 graph, 2 graph, 3 graphs\r\n\r\n  const handleSetGraphLayout = (payload: string) => {\r\n    return setGraphLayout(payload);\r\n  };\r\n\r\n  const handleSetGraphOneSession = (sessionId: string) => {\r\n    return setGraphOneSession(sessionId);\r\n  };\r\n  const handleSetGraphTwoSessionId = (sessionId: string, graph: number) => {\r\n    console.log('inside 2nd graph', sessionId, graph);\r\n    if (graph === 1) {\r\n      console.log('inside graph 1');\r\n      return setTwoGraphSession({\r\n        ...twoGraphSession,\r\n        graphOneSessionId: sessionId,\r\n      });\r\n    }\r\n    if (graph === 2)\r\n      return setTwoGraphSession({\r\n        ...twoGraphSession,\r\n        graphTwoSessionId: sessionId,\r\n      });\r\n  };\r\n  const handleSetGraphThreeSessionId = (sessionId: string, graph: number) => {\r\n    if (graph === 1)\r\n      return setThreeGraphSession({\r\n        ...threeGraphSession,\r\n        graphOneSessionId: sessionId,\r\n      });\r\n    if (graph === 2)\r\n      return setThreeGraphSession({\r\n        ...threeGraphSession,\r\n        graphTwoSessionId: sessionId,\r\n      });\r\n    if (graph === 3)\r\n      return setThreeGraphSession({\r\n        ...threeGraphSession,\r\n        graphThreeSessionId: sessionId,\r\n      });\r\n  };\r\n\r\n  const handleDeleteSession = (sessionId: string) => {\r\n    return (\r\n      graphLogDispatch(deleteGraphSession(sessionId)),\r\n      setGraphOneSession(undefined)\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    const handleSetPayload = (payload: string) => {\r\n      console.log('setting graph data');\r\n      const parsedPayload: any = JSON.parse(payload);\r\n      if (\r\n        parsedPayload.labels &&\r\n        parsedPayload.datasets &&\r\n        parsedPayload.sessionId\r\n      ) {\r\n        const data: IGraphData = {\r\n          type: parsedPayload.type,\r\n          labels: parsedPayload.labels,\r\n          datasets: parsedPayload.datasets,\r\n          sessionId: parsedPayload.sessionId,\r\n        };\r\n\r\n        return graphLogDispatch(setGraphLog(data));\r\n      }\r\n\r\n      return null;\r\n    };\r\n    spiralGraphs((payload: string) => handleSetPayload(payload)); //working\r\n  }, [graphLogDispatch]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"ml-5\">\r\n        <div>\r\n          <h4>Available Graph Sessions</h4>\r\n        </div>\r\n        <p>Select Layout</p>\r\n        <div\r\n          className=\"btn-group center m-2 new\"\r\n          role=\"group\"\r\n          aria-label=\"Basic outlined example\"\r\n        >\r\n          <Button\r\n            type=\"button\"\r\n            onClick={() => handleSetGraphLayout('1_graph')}\r\n            className={`btn btn-outline-primary ${\r\n              graphLayout === '1_graph' ? 'active' : ''\r\n            }`}\r\n          >\r\n            1 Graph\r\n          </Button>\r\n          <Button\r\n            type=\"button\"\r\n            onClick={() => handleSetGraphLayout('2_graph')}\r\n            className={`btn btn-outline-primary ${\r\n              graphLayout === '2_graph' ? 'active' : ''\r\n            }`}\r\n          >\r\n            2 Graphs\r\n          </Button>\r\n          <Button\r\n            type=\"button\"\r\n            onClick={() => handleSetGraphLayout('3_graph')}\r\n            className={`btn btn-outline-primary ${\r\n              graphLayout === '3_graph' ? 'active' : ''\r\n            }`}\r\n          >\r\n            3 Graphs\r\n          </Button>\r\n        </div>\r\n\r\n        {graphLayout === '1_graph' && (\r\n          <div>\r\n            <div className=\"row ml-2 scroll-y-allow\">\r\n              {sessionData.map((session) => (\r\n                <React.Fragment>\r\n                  <div\r\n                    style={{\r\n                      border: '1px solid #2e2e2e',\r\n                      borderRadius: 5,\r\n                      padding: 2,\r\n                      margin: 2,\r\n                    }}\r\n                  >\r\n                    <Button\r\n                      key={session.sessionId}\r\n                      variant=\"light\"\r\n                      onClick={() =>\r\n                        handleSetGraphOneSession(session.sessionId)\r\n                      }\r\n                    >\r\n                      <span>\r\n                        <Badge\r\n                          pill\r\n                          variant=\"dark\"\r\n                          className=\"font-thin pl-3 pr-3 pb-2 pt-2\"\r\n                        >\r\n                          {session.sessionId}\r\n                          <span style={{ marginRight: '20px' }}></span>\r\n                        </Badge>\r\n                      </span>\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"light\"\r\n                      onClick={() => handleDeleteSession(session.sessionId)}\r\n                    >\r\n                      <FontAwesomeIcon icon={faTimesCircle} />\r\n                    </Button>\r\n                  </div>\r\n                </React.Fragment>\r\n              ))}\r\n            </div>\r\n            {graphOneSession ? (\r\n              <GraphSessionData sessionId={graphOneSession} />\r\n            ) : (\r\n              ''\r\n            )}\r\n          </div>\r\n        )}\r\n        {graphLayout === '2_graph' && (\r\n          <React.Fragment>\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-6\">\r\n                <div className=\"row ml-2 scroll-y-allow\">\r\n                  {sessionData.map((session) => (\r\n                    <React.Fragment>\r\n                      <div\r\n                        style={{\r\n                          border: '1px solid #2e2e2e',\r\n                          borderRadius: 5,\r\n                          padding: 2,\r\n                          margin: 2,\r\n                        }}\r\n                      >\r\n                        <Button\r\n                          key={session.sessionId}\r\n                          variant=\"light\"\r\n                          onClick={() =>\r\n                            handleSetGraphTwoSessionId(session.sessionId, 1)\r\n                          }\r\n                        >\r\n                          <span>\r\n                            <Badge\r\n                              pill\r\n                              variant=\"dark\"\r\n                              className=\"font-thin pl-3 pr-3 pb-2 pt-2\"\r\n                            >\r\n                              {session.sessionId}\r\n                              <span style={{ marginRight: '20px' }}></span>\r\n                            </Badge>\r\n                          </span>\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"light\"\r\n                          onClick={() => handleDeleteSession(session.sessionId)}\r\n                        >\r\n                          <FontAwesomeIcon icon={faTimesCircle} />\r\n                        </Button>\r\n                      </div>\r\n                    </React.Fragment>\r\n                  ))}\r\n                </div>\r\n                {twoGraphSession.graphOneSessionId && (\r\n                  <React.Fragment>\r\n                    <GraphSessionData\r\n                      sessionId={twoGraphSession.graphOneSessionId}\r\n                    />\r\n                  </React.Fragment>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"col-lg-6\">\r\n                <div className=\"row ml-2 scroll-y-allow\">\r\n                  {sessionData.map((session) => (\r\n                    <React.Fragment>\r\n                      <div\r\n                        style={{\r\n                          border: '1px solid #2e2e2e',\r\n                          borderRadius: 5,\r\n                          padding: 2,\r\n                          margin: 2,\r\n                        }}\r\n                      >\r\n                        <Button\r\n                          key={session.sessionId}\r\n                          variant=\"light\"\r\n                          onClick={() =>\r\n                            handleSetGraphTwoSessionId(session.sessionId, 2)\r\n                          }\r\n                        >\r\n                          <span>\r\n                            <Badge\r\n                              pill\r\n                              variant=\"dark\"\r\n                              className=\"font-thin pl-3 pr-3 pb-2 pt-2\"\r\n                            >\r\n                              {session.sessionId}\r\n                              <span style={{ marginRight: '20px' }}></span>\r\n                            </Badge>\r\n                          </span>\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"light\"\r\n                          onClick={() => handleDeleteSession(session.sessionId)}\r\n                        >\r\n                          <FontAwesomeIcon icon={faTimesCircle} />\r\n                        </Button>\r\n                      </div>\r\n                    </React.Fragment>\r\n                  ))}\r\n                </div>\r\n                {twoGraphSession.graphTwoSessionId && (\r\n                  <React.Fragment>\r\n                    <GraphSessionData\r\n                      sessionId={twoGraphSession.graphTwoSessionId}\r\n                    />\r\n                  </React.Fragment>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </React.Fragment>\r\n        )}\r\n        {graphLayout === '3_graph' && (\r\n          <React.Fragment>\r\n            <div className=\"row\">\r\n              <div className=\"col-lg-4\">\r\n                <div className=\"row ml-2 scroll-y-allow\">\r\n                  {sessionData.map((session) => (\r\n                    <React.Fragment>\r\n                      <div\r\n                        style={{\r\n                          border: '1px solid #2e2e2e',\r\n                          borderRadius: 5,\r\n                          padding: 2,\r\n                          margin: 2,\r\n                        }}\r\n                      >\r\n                        <Button\r\n                          key={session.sessionId}\r\n                          variant=\"light\"\r\n                          onClick={() =>\r\n                            handleSetGraphThreeSessionId(session.sessionId, 1)\r\n                          }\r\n                        >\r\n                          <span>\r\n                            <Badge\r\n                              pill\r\n                              variant=\"dark\"\r\n                              className=\"font-thin pl-3 pr-3 pb-2 pt-2\"\r\n                            >\r\n                              {session.sessionId}\r\n                              <span style={{ marginRight: '20px' }}></span>\r\n                            </Badge>\r\n                          </span>\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"light\"\r\n                          onClick={() => handleDeleteSession(session.sessionId)}\r\n                        >\r\n                          <FontAwesomeIcon icon={faTimesCircle} />\r\n                        </Button>\r\n                      </div>\r\n                    </React.Fragment>\r\n                  ))}\r\n                </div>\r\n                {threeGraphSession.graphOneSessionId && (\r\n                  <React.Fragment>\r\n                    <GraphSessionData\r\n                      sessionId={threeGraphSession.graphOneSessionId}\r\n                    />\r\n                  </React.Fragment>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"col-lg-4\">\r\n                <div className=\"row ml-2 scroll-y-allow\">\r\n                  {sessionData.map((session) => (\r\n                    <React.Fragment>\r\n                      <div\r\n                        style={{\r\n                          border: '1px solid #2e2e2e',\r\n                          borderRadius: 5,\r\n                          padding: 2,\r\n                          margin: 2,\r\n                        }}\r\n                      >\r\n                        <Button\r\n                          key={session.sessionId}\r\n                          variant=\"light\"\r\n                          onClick={() =>\r\n                            handleSetGraphThreeSessionId(session.sessionId, 2)\r\n                          }\r\n                        >\r\n                          <span>\r\n                            <Badge\r\n                              pill\r\n                              variant=\"dark\"\r\n                              className=\"font-thin pl-3 pr-3 pb-2 pt-2\"\r\n                            >\r\n                              {session.sessionId}\r\n                              <span style={{ marginRight: '20px' }}></span>\r\n                            </Badge>\r\n                          </span>\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"light\"\r\n                          onClick={() => handleDeleteSession(session.sessionId)}\r\n                        >\r\n                          <FontAwesomeIcon icon={faTimesCircle} />\r\n                        </Button>\r\n                      </div>\r\n                    </React.Fragment>\r\n                  ))}\r\n                </div>\r\n                {threeGraphSession.graphTwoSessionId && (\r\n                  <React.Fragment>\r\n                    <GraphSessionData\r\n                      sessionId={threeGraphSession.graphTwoSessionId}\r\n                    />\r\n                  </React.Fragment>\r\n                )}\r\n              </div>\r\n              <div className=\"col-lg-4\">\r\n                <div className=\"row ml-2 scroll-y-allow\">\r\n                  {sessionData.map((session) => (\r\n                    <React.Fragment>\r\n                      <div\r\n                        style={{\r\n                          border: '1px solid #2e2e2e',\r\n                          borderRadius: 5,\r\n                          padding: 2,\r\n                          margin: 2,\r\n                        }}\r\n                      >\r\n                        <Button\r\n                          key={session.sessionId}\r\n                          variant=\"light\"\r\n                          onClick={() =>\r\n                            handleSetGraphThreeSessionId(session.sessionId, 3)\r\n                          }\r\n                        >\r\n                          <span>\r\n                            <Badge\r\n                              pill\r\n                              variant=\"dark\"\r\n                              className=\"font-thin pl-3 pr-3 pb-2 pt-2\"\r\n                            >\r\n                              {session.sessionId}\r\n                              <span style={{ marginRight: '20px' }}></span>\r\n                            </Badge>\r\n                          </span>\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"light\"\r\n                          onClick={() => handleDeleteSession(session.sessionId)}\r\n                        >\r\n                          <FontAwesomeIcon icon={faTimesCircle} />\r\n                        </Button>\r\n                      </div>\r\n                    </React.Fragment>\r\n                  ))}\r\n                </div>\r\n                {threeGraphSession.graphThreeSessionId && (\r\n                  <React.Fragment>\r\n                    <GraphSessionData\r\n                      sessionId={threeGraphSession.graphThreeSessionId}\r\n                    />\r\n                  </React.Fragment>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </React.Fragment>\r\n        )}\r\n\r\n        {sessionData.length === 0 && 'No available sessions'}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default GraphSession;\r\n","import React, { Dispatch, Fragment, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport GraphSession from '../components/graph/GraphSession';\r\nimport {\r\n  IGraphLogActions,\r\n  setGraphLog,\r\n} from '../store/actions/graphLogActions';\r\nimport { spiralGraphs } from '../api';\r\nimport { IGraphData } from '../store/reducers/graphPrinterReducer';\r\n\r\nconst Graph = () => {\r\n  const graphLogDispatch = useDispatch<Dispatch<IGraphLogActions>>();\r\n\r\n  useEffect(() => {\r\n    const handleSetPayload = (payload: string) => {\r\n      console.log('setting graph data');\r\n      const parsedPayload: any = JSON.parse(payload);\r\n      if (\r\n        parsedPayload.labels &&\r\n        parsedPayload.datasets &&\r\n        parsedPayload.sessionId\r\n      ) {\r\n        const data: IGraphData = {\r\n          type: parsedPayload.type,\r\n          labels: parsedPayload.labels,\r\n          datasets: parsedPayload.datasets,\r\n          sessionId: parsedPayload.sessionId,\r\n        };\r\n\r\n        return graphLogDispatch(setGraphLog(data));\r\n      }\r\n\r\n      return null;\r\n    };\r\n    spiralGraphs((payload: string) => handleSetPayload(payload)); //working\r\n  }, [graphLogDispatch]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <GraphSession />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Graph;\r\n","import * as types from '../types';\r\nimport { ActionCreator, Action } from 'redux';\r\nimport { ITableData } from '../reducers/tablePrinterReducer';\r\n\r\n//ITable Actions\r\nexport interface ITableLogActions extends Action {\r\n  type:\r\n    | types.SET_TABLE_DATA_LOG\r\n    | types.SET_TABLE_HEADER_LOG\r\n    | types.DELETE_TABLE_SESSION;\r\n\r\n  payload: ITableData[] | string[] | string;\r\n}\r\n\r\n//ITable Action : Setting logs, caught in saga\r\nconst setTableLog: ActionCreator<ITableLogActions> = (\r\n  payload: ITableData[]\r\n) => ({\r\n  type: types.SET_TABLE_DATA_LOG,\r\n  payload: payload,\r\n});\r\nconst setTableHeaderLog: ActionCreator<ITableLogActions> = (\r\n  payload: string[]\r\n) => ({\r\n  type: types.SET_TABLE_HEADER_LOG,\r\n  payload: payload,\r\n});\r\n\r\nconst deleteTableSession: ActionCreator<ITableLogActions> = (\r\n  payload: string\r\n) => ({\r\n  type: types.DELETE_TABLE_SESSION,\r\n  payload: payload,\r\n});\r\n\r\nexport { setTableLog, setTableHeaderLog, deleteTableSession };\r\n","import React, { Dispatch, Fragment, useEffect, useState } from \"react\";\r\nimport { Table } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { tablePrinter } from \"../../api\";\r\nimport {\r\n  ITableLogActions,\r\n  setTableHeaderLog,\r\n  setTableLog,\r\n} from \"../../store/actions/tableLogActions\";\r\nimport { AppState } from \"../../store/reducers\";\r\nimport { ITableData } from \"../../store/reducers/tablePrinterReducer\";\r\nimport parse from \"html-react-parser\";\r\n\r\ninterface IProps {\r\n  sessionId: string;\r\n}\r\n\r\nconst TableSessions: React.FC<IProps> = ({ sessionId }) => {\r\n  const { sessionData } = useSelector((state: AppState) => state.tablePrinter);\r\n  const tableLogDispatch = useDispatch<Dispatch<ITableLogActions>>();\r\n\r\n  const [currentSession, setCurrentSession] = useState<ITableData>();\r\n  const sessionIndex = (session: ITableData) =>\r\n    session.sessionId === sessionId ? true : false;\r\n\r\n  useEffect(() => {\r\n    const sessionIndexNew = sessionData.findIndex(sessionIndex);\r\n    setCurrentSession(sessionData[sessionIndexNew]);\r\n\r\n    if (currentSession) getData(currentSession.data);\r\n\r\n    const handleSetPayload = (payload: string) => {\r\n      // const parsedPayload: ITableData = JSON.parse(payload);\r\n      const parsedPayload: any = JSON.parse(payload);\r\n\r\n      // const newPayload: ITableData = parsedPayload;\r\n      if (typeof parsedPayload[0] === \"string\") {\r\n        return tableLogDispatch(setTableHeaderLog(parsedPayload));\r\n      }\r\n\r\n      // return tableLogDispatch(setTableLog(newPayload));\r\n      return tableLogDispatch(setTableLog(parsedPayload));\r\n    };\r\n    tablePrinter((payload: string) => handleSetPayload(payload));\r\n  }, [sessionId]);\r\n\r\n  const getData = (payload: any) => {\r\n    let data: string = \"\";\r\n    for (const key in payload) {\r\n      console.log(\"column data\", payload[key]);\r\n      if (payload[key]) data += `<td key=${key}>${payload[key]}</td>`;\r\n    }\r\n\r\n    return data ? `<tr>${data}</tr>` : \"\";\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Table striped bordered hover variant=\"dark\">\r\n        <thead>\r\n          <tr>\r\n            {currentSession?.header?.map(\r\n              (title: string) =>\r\n                title && (\r\n                  <React.Fragment key={title}>\r\n                    <th>{title}</th>\r\n                  </React.Fragment>\r\n                )\r\n            )}\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {currentSession?.data?.map(\r\n            (datum: any) =>\r\n              datum.id && (\r\n                <React.Fragment key={datum.id}>\r\n                  {parse(getData(datum))}\r\n                </React.Fragment>\r\n              )\r\n          )}\r\n        </tbody>\r\n      </Table>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default TableSessions;\r\n","import { faTimesCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { Dispatch, Fragment, useState } from 'react';\r\nimport { ButtonGroup, Button, Badge } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  deleteTableSession,\r\n  ITableLogActions,\r\n} from '../../store/actions/tableLogActions';\r\nimport { AppState } from '../../store/reducers';\r\nimport TableSessionData from './TableSessionData';\r\n\r\nconst TableSessions = () => {\r\n  const { sessionData } = useSelector((state: AppState) => state.tablePrinter);\r\n  const [currentSession, setCurrentSession] = useState<string>();\r\n  const tableLogDispatch = useDispatch<Dispatch<ITableLogActions>>();\r\n\r\n  const handleSetCurrentSesssion = (sessionId: string) => {\r\n    return setCurrentSession(sessionId);\r\n  };\r\n  const handleDeleteSession = (sessionId: string) => {\r\n    return (\r\n      tableLogDispatch(deleteTableSession(sessionId)),\r\n      setCurrentSession(undefined)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"ml-5\">\r\n        <div>\r\n          <h4>Available Table Log Sessions</h4>\r\n        </div>\r\n        <div className=\"row ml-2\">\r\n          {sessionData.map((session) => (\r\n            <React.Fragment>\r\n              <div\r\n                style={{\r\n                  border: '1px solid #2e2e2e',\r\n                  borderRadius: 5,\r\n                  padding: 2,\r\n                  margin: 2,\r\n                }}\r\n              >\r\n                <Button\r\n                  key={session.sessionId}\r\n                  variant=\"light\"\r\n                  onClick={() => handleSetCurrentSesssion(session.sessionId)}\r\n                >\r\n                  <span>\r\n                    <Badge\r\n                      pill\r\n                      variant=\"dark\"\r\n                      className=\"font-thin pl-3 pr-3 pb-2 pt-2\"\r\n                    >\r\n                      {session.sessionId}\r\n                      <span style={{ marginRight: '20px' }}></span>\r\n                    </Badge>\r\n                  </span>\r\n                </Button>\r\n                <Button\r\n                  variant=\"light\"\r\n                  onClick={() => handleDeleteSession(session.sessionId)}\r\n                >\r\n                  <FontAwesomeIcon icon={faTimesCircle} />\r\n                </Button>\r\n              </div>\r\n            </React.Fragment>\r\n          ))}\r\n        </div>\r\n        {currentSession && <TableSessionData sessionId={currentSession} />}\r\n        {sessionData.length === 0 && 'No available sessions'}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default TableSessions;\r\n","import React, { Fragment, Dispatch, useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport {\r\n  ITableLogActions,\r\n  setTableHeaderLog,\r\n  setTableLog,\r\n} from \"../store/actions/tableLogActions\";\r\nimport { ITableData } from \"../store/reducers/tablePrinterReducer\";\r\n\r\nimport { spiralLogs, tablePrinter } from \"../api\";\r\nimport TableSessions from \"../components/table/TableSessions\";\r\n\r\nconst TableLog = () => {\r\n  //   const { header, data } = useSelector((state: AppState) => state.tableLog);\r\n  const tableLogDispatch = useDispatch<Dispatch<ITableLogActions>>();\r\n\r\n  // const getData = (payload: any) => {\r\n  //   let data: any[] = [];\r\n  //   for (const key in payload) {\r\n  //     data.push(<td>{payload[key]}</td>);\r\n  //   }\r\n\r\n  //   return data.map((datum) => datum);\r\n  // };\r\n\r\n  useEffect(() => {\r\n    const handleSetPayload = (payload: string) => {\r\n      const parsedPayload: any = JSON.parse(payload);\r\n      console.log(\"inside handleSetPayload\");\r\n\r\n      const payloadNew: ITableData = {\r\n        sessionId: parsedPayload.sessionId,\r\n        data: parsedPayload.rowData,\r\n      };\r\n\r\n      return tableLogDispatch(setTableLog(payloadNew));\r\n\r\n      // return null;\r\n    };\r\n    tablePrinter((payload: string) => handleSetPayload(payload));\r\n  }, [tableLogDispatch]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <TableSessions />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default TableLog;\r\n","interface IRoute {\r\n  routeName: string;\r\n  route: string;\r\n}\r\n\r\nexport const routes: IRoute[] = [\r\n  {\r\n    routeName: 'HOME-PAGE',\r\n    route: '/',\r\n  },\r\n  {\r\n    routeName: 'TABLE-PRINTER',\r\n    route: '/table-printer',\r\n  },\r\n  {\r\n    routeName: 'HTML-PRINTER',\r\n    route: '/html-printer',\r\n  },\r\n  {\r\n    routeName: 'SIMPLE-PRINTER',\r\n    route: '/simple-printer',\r\n  },\r\n  {\r\n    routeName: 'GRAPH-PRINTER',\r\n    route: '/graph-printer',\r\n  },\r\n  {\r\n    routeName: 'COMBINED-PRINTER',\r\n    route: '/combined-printer',\r\n  },\r\n  {\r\n    routeName: 'CUSTOM-PRINTER',\r\n    route: '/custom-printer',\r\n  },\r\n];\r\n\r\nexport const routeNames = {\r\n  TABLE_PRINTER: 'TABLE-PRINTER',\r\n  HTML_PRINTER: 'HTML-PRINTER',\r\n  SIMPLE_PRINTER: 'SIMPLE-PRINTER',\r\n  GRAPH_PRINTER: 'GRAPH-PRINTER',\r\n  HOME_PAGE: 'HOME-PAGE',\r\n  COMBINED_PRINTER: 'COMBINED-PRINTER',\r\n  CUSTOM_PRINTER: 'CUSTOM-PRINTER',\r\n};\r\n","import React, { Fragment } from 'react';\r\nimport { ButtonGroup, Button } from 'react-bootstrap';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { routes, routeNames } from './MenuRoutes';\r\n\r\nconst Menu = () => {\r\n  const history = useHistory();\r\n  const changeRoute = (routeName: string) => {\r\n    const route = routes.find((route) => route.routeName === routeName);\r\n    return history.push(route ? route.route : '');\r\n  };\r\n  return (\r\n    <Fragment>\r\n      <div className=\"center p-4\">\r\n        <div\r\n          className=\"p-4 card shadow col-md-6\"\r\n          style={{ backgroundColor: '#c6c6c6' }}\r\n        >\r\n          <ButtonGroup className=\"mb-2\">\r\n            <Button onClick={() => changeRoute(routeNames.HOME_PAGE)}>\r\n              Home\r\n            </Button>\r\n            <Button onClick={() => changeRoute(routeNames.SIMPLE_PRINTER)}>\r\n              Simple Printer\r\n            </Button>\r\n            <Button onClick={() => changeRoute(routeNames.HTML_PRINTER)}>\r\n              HTML Printer\r\n            </Button>\r\n            <Button onClick={() => changeRoute(routeNames.GRAPH_PRINTER)}>\r\n              Graph Printer\r\n            </Button>\r\n            <Button onClick={() => changeRoute(routeNames.TABLE_PRINTER)}>\r\n              Table Printer\r\n            </Button>\r\n            <Button onClick={() => changeRoute(routeNames.COMBINED_PRINTER)}>\r\n              Combined Printer\r\n            </Button>\r\n            <Button onClick={() => changeRoute(routeNames.CUSTOM_PRINTER)}>\r\n              Custom Printer\r\n            </Button>\r\n          </ButtonGroup>\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n","import * as types from '../types';\r\nimport { ActionCreator, Action } from 'redux';\r\nimport { IHtmlPrinterPayload } from '../reducers/htmlPrinterReducer';\r\n\r\n//ITable Actions\r\nexport interface IHtmlPrinterLogActions extends Action {\r\n  type: types.SET_HTML_PRINTER_LOG | types.DELETE_HTML_PRINTER_SESSION;\r\n\r\n  payload: IHtmlPrinterPayload | string;\r\n}\r\n\r\n//ITable Action : Setting logs, caught in saga\r\nconst setHtmlPrinterLog: ActionCreator<IHtmlPrinterLogActions> = (\r\n  payload: IHtmlPrinterPayload\r\n) => ({\r\n  type: types.SET_HTML_PRINTER_LOG,\r\n  payload: payload,\r\n});\r\n\r\n//ITable Action : Setting logs, caught in saga\r\nconst deleteHtmlPrinterSession: ActionCreator<IHtmlPrinterLogActions> = (\r\n  payload: string\r\n) => ({\r\n  type: types.DELETE_HTML_PRINTER_SESSION,\r\n  payload: payload,\r\n});\r\n\r\nexport { setHtmlPrinterLog, deleteHtmlPrinterSession };\r\n","import React, { Dispatch, Fragment, useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { htmlPrinter } from '../../api';\r\nimport {\r\n  IHtmlPrinterLogActions,\r\n  setHtmlPrinterLog,\r\n} from '../../store/actions/htmlPrinterActions';\r\nimport { AppState } from '../../store/reducers';\r\nimport { IHtmlPrinterPayload } from '../../store/reducers/htmlPrinterReducer';\r\n\r\ninterface IProps {\r\n  sessionId: string;\r\n}\r\nconst HtmlPrinterData: React.FC<IProps> = ({ sessionId }) => {\r\n  const { data } = useSelector((state: AppState) => state.htmlPrinter);\r\n  const htmlPrinterLogDispatch = useDispatch<\r\n    Dispatch<IHtmlPrinterLogActions>\r\n  >();\r\n\r\n  const [currentSession, setCurrentSession] = useState<IHtmlPrinterPayload>();\r\n\r\n  useEffect(() => {\r\n    const sessionIndex = (session: IHtmlPrinterPayload) =>\r\n      session.sessionId === sessionId ? true : false;\r\n\r\n    const sessionIndexNew = data.findIndex(sessionIndex);\r\n\r\n    setCurrentSession(data[sessionIndexNew]);\r\n\r\n    const handleSetPayload = (payload: string) => {\r\n      const parsedPayload: any = JSON.parse(payload);\r\n      return htmlPrinterLogDispatch(setHtmlPrinterLog(parsedPayload));\r\n    };\r\n\r\n    htmlPrinter((payload: string) => handleSetPayload(payload));\r\n  }, [sessionId, data, htmlPrinterLogDispatch]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <div\r\n        dangerouslySetInnerHTML={{\r\n          __html: currentSession\r\n            ? currentSession.htmlPayload\r\n            : `<div> no html data found </div>`,\r\n        }}\r\n      ></div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default HtmlPrinterData;\r\n","import { faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { Dispatch, Fragment, useState } from \"react\";\r\nimport { Button, Badge } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  deleteHtmlPrinterSession,\r\n  IHtmlPrinterLogActions,\r\n} from \"../../store/actions/htmlPrinterActions\";\r\n\r\nimport { AppState } from \"../../store/reducers\";\r\nimport HtmlPrinterSessionData from \"./HtmlPrinterSessionData\";\r\n\r\nconst HtmlPrinterSessions = () => {\r\n  const { data } = useSelector((state: AppState) => state.htmlPrinter);\r\n  const [currentSession, setCurrentSession] = useState<string>();\r\n  const htmlPrinterLogDispatch = useDispatch<\r\n    Dispatch<IHtmlPrinterLogActions>\r\n  >();\r\n\r\n  const handleSetCurrentSesssion = (sessionId: string) => {\r\n    return setCurrentSession(sessionId);\r\n  };\r\n\r\n  const handleDeleteSession = (sessionId: string) => {\r\n    return (\r\n      htmlPrinterLogDispatch(deleteHtmlPrinterSession(sessionId)),\r\n      setCurrentSession(undefined)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"ml-5\">\r\n        <div>\r\n          <h4>Available Table Log Sessions</h4>\r\n        </div>\r\n        <div className=\"row ml-2\">\r\n          {data.map((session) => (\r\n            <React.Fragment key={session.sessionId}>\r\n              <div\r\n                style={{\r\n                  border: \"1px solid #2e2e2e\",\r\n                  borderRadius: 5,\r\n                  padding: 2,\r\n                  margin: 2,\r\n                }}\r\n              >\r\n                <Button\r\n                  key={session.sessionId}\r\n                  variant=\"light\"\r\n                  onClick={() => handleSetCurrentSesssion(session.sessionId)}\r\n                >\r\n                  <span>\r\n                    <Badge\r\n                      pill\r\n                      variant=\"dark\"\r\n                      className=\"font-thin pl-3 pr-3 pb-2 pt-2\"\r\n                    >\r\n                      {session.sessionId}\r\n                      <span style={{ marginRight: \"20px\" }}></span>\r\n                    </Badge>\r\n                  </span>\r\n                </Button>\r\n                <Button\r\n                  variant=\"light\"\r\n                  onClick={() => handleDeleteSession(session.sessionId)}\r\n                >\r\n                  <FontAwesomeIcon icon={faTimesCircle} />\r\n                </Button>\r\n              </div>\r\n            </React.Fragment>\r\n          ))}\r\n        </div>\r\n        {currentSession && (\r\n          <HtmlPrinterSessionData sessionId={currentSession} />\r\n        )}\r\n        {data.length === 0 && \"No available sessions\"}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default HtmlPrinterSessions;\r\n","import React, { Dispatch, Fragment, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { htmlPrinter } from '../api';\r\nimport HtmlPrinterSessions from '../components/html/HtmlPrinterSession';\r\nimport {\r\n  IHtmlPrinterLogActions,\r\n  setHtmlPrinterLog,\r\n} from '../store/actions/htmlPrinterActions';\r\nimport { IHtmlPrinterPayload } from '../store/reducers/htmlPrinterReducer';\r\n\r\nconst HtmlPrinter = () => {\r\n  //   const { header, data } = useSelector((state: AppState) => state.tableLog);\r\n  const htmlPrinterDispatch = useDispatch<Dispatch<IHtmlPrinterLogActions>>();\r\n\r\n  // const getData = (payload: any) => {\r\n  //   let data: any[] = [];\r\n  //   for (const key in payload) {\r\n  //     data.push(<td>{payload[key]}</td>);\r\n  //   }\r\n\r\n  //   return data.map((datum) => datum);\r\n  // };\r\n\r\n  useEffect(() => {\r\n    const handleSetPayload = (payload: string) => {\r\n      console.log('payload = ', payload);\r\n      const parsedPayload: any = JSON.parse(payload);\r\n      console.log('data after parsing', JSON.stringify(parsedPayload.data));\r\n      if (parsedPayload.sessionId) {\r\n        const payload: IHtmlPrinterPayload = {\r\n          sessionId: parsedPayload.sessionId,\r\n          htmlPayload: parsedPayload.html,\r\n        };\r\n\r\n        console.log('data = ', JSON.stringify(payload));\r\n        htmlPrinterDispatch(setHtmlPrinterLog(payload));\r\n      }\r\n      return null;\r\n    };\r\n    htmlPrinter((payload: string) => handleSetPayload(payload));\r\n  }, [htmlPrinterDispatch]);\r\n  return (\r\n    <Fragment>\r\n      <HtmlPrinterSessions />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default HtmlPrinter;\r\n","import * as types from \"../types\";\r\nimport { ActionCreator, Action } from \"redux\";\r\nimport { ISimplePrinterPayload } from \"../reducers/simplePrinterReducer\";\r\n\r\n//ITable Actions\r\nexport interface ISimplePrinterLogActions extends Action {\r\n  type: types.SET_SIMPLE_PRINTER_LOG | types.DELETE_SIMPLE_PRINTER_SESSION;\r\n\r\n  payload: ISimplePrinterPayload[] | string;\r\n}\r\n\r\n//ITable Action : Setting logs, caught in saga\r\nconst setSimplePrinterLog: ActionCreator<ISimplePrinterLogActions> = (\r\n  payload: ISimplePrinterPayload[]\r\n) => ({\r\n  type: types.SET_SIMPLE_PRINTER_LOG,\r\n  payload: payload,\r\n});\r\n\r\n//ITable Action : Setting logs, caught in saga\r\nconst deleteSimplePrinterSession: ActionCreator<ISimplePrinterLogActions> = (\r\n  payload: string\r\n) => ({\r\n  type: types.DELETE_SIMPLE_PRINTER_SESSION,\r\n  payload: payload,\r\n});\r\n\r\nexport { setSimplePrinterLog, deleteSimplePrinterSession };\r\n","import React, { Dispatch, Fragment, useEffect, useState } from 'react';\r\nimport { Table } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { simplePrinter, spiralLogs } from '../../api';\r\nimport {\r\n  ISimplePrinterLogActions,\r\n  setSimplePrinterLog,\r\n} from '../../store/actions/simplePrinterActions';\r\nimport { AppState } from '../../store/reducers';\r\nimport { ISimplePrinterPayload } from '../../store/reducers/simplePrinterReducer';\r\n\r\ninterface IProps {\r\n  sessionId: string;\r\n}\r\n\r\nconst SimplePrinterSessionData: React.FC<IProps> = ({ sessionId }) => {\r\n  const { log_data } = useSelector((state: AppState) => state.simplePrinter);\r\n  const simplePrinterLogDispatch = useDispatch<\r\n    Dispatch<ISimplePrinterLogActions>\r\n  >();\r\n\r\n  const [currentSession, setCurrentSession] = useState<ISimplePrinterPayload>();\r\n  const sessionIndex = (session: ISimplePrinterPayload) =>\r\n    session.sessionId === sessionId ? true : false;\r\n\r\n  useEffect(() => {\r\n    const sessionIndexNew = log_data.findIndex(sessionIndex);\r\n    setCurrentSession(log_data[sessionIndexNew]);\r\n    const handleSetPayload = (payload: string) => {\r\n      // const parsedPayload: ITableData = JSON.parse(payload);\r\n      const parsedPayload: any = JSON.parse(payload);\r\n\r\n      // return tableLogDispatch(setTableLog(newPayload));\r\n      return simplePrinterLogDispatch(setSimplePrinterLog(parsedPayload));\r\n    };\r\n    simplePrinter((payload: string) => handleSetPayload(payload));\r\n  }, [sessionId]);\r\n\r\n  const getData = (payload: any) => {\r\n    let data: any[] = [];\r\n    for (const key in payload) {\r\n      if (key !== 'id') data.push(<td key={key}>{payload[key].toString()}</td>);\r\n    }\r\n\r\n    return data.map((datum) => datum);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Table striped bordered hover variant=\"dark\">\r\n        <tbody>\r\n          {currentSession?.data?.map(\r\n            (datum: any) =>\r\n              datum.id && (\r\n                <React.Fragment key={datum.id}>\r\n                  <tr>{getData(datum)}</tr>\r\n                </React.Fragment>\r\n              )\r\n          )}\r\n        </tbody>\r\n      </Table>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default SimplePrinterSessionData;\r\n","import { faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport React, { Dispatch, Fragment, useState } from \"react\";\r\nimport { Button, Badge } from \"react-bootstrap\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  deleteSimplePrinterSession,\r\n  ISimplePrinterLogActions,\r\n} from \"../../store/actions/simplePrinterActions\";\r\n\r\nimport { AppState } from \"../../store/reducers\";\r\nimport SimplePrinterSessionData from \"./SimplePrinterData\";\r\n\r\nconst SimplePrinterSessions = () => {\r\n  const { log_data } = useSelector((state: AppState) => state.simplePrinter);\r\n  const [currentSession, setCurrentSession] = useState<string>();\r\n  const simplePrinterLogDispatch = useDispatch<\r\n    Dispatch<ISimplePrinterLogActions>\r\n  >();\r\n\r\n  const handleSetCurrentSesssion = (sessionId: string) => {\r\n    return setCurrentSession(sessionId);\r\n  };\r\n  const handleDeleteSession = (sessionId: string) => {\r\n    return (\r\n      simplePrinterLogDispatch(deleteSimplePrinterSession(sessionId)),\r\n      setCurrentSession(undefined)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"ml-5\">\r\n        <div>\r\n          <h4>Available Table Log Sessions</h4>\r\n        </div>\r\n        <div className=\"row ml-2\">\r\n          {log_data.map((session) => (\r\n            <React.Fragment>\r\n              <div\r\n                style={{\r\n                  border: \"1px solid #2e2e2e\",\r\n                  borderRadius: 5,\r\n                  padding: 2,\r\n                  margin: 2,\r\n                }}\r\n              >\r\n                <Button\r\n                  key={session.sessionId}\r\n                  variant=\"light\"\r\n                  onClick={() => handleSetCurrentSesssion(session.sessionId)}\r\n                >\r\n                  <span>\r\n                    <Badge\r\n                      pill\r\n                      variant=\"dark\"\r\n                      className=\"font-thin pl-3 pr-3 pb-2 pt-2\"\r\n                    >\r\n                      {session.sessionId}\r\n                      <span style={{ marginRight: \"20px\" }}></span>\r\n                    </Badge>\r\n                  </span>\r\n                </Button>\r\n                <Button\r\n                  variant=\"light\"\r\n                  onClick={() => handleDeleteSession(session.sessionId)}\r\n                >\r\n                  <FontAwesomeIcon icon={faTimesCircle} />\r\n                </Button>\r\n              </div>\r\n            </React.Fragment>\r\n          ))}\r\n        </div>\r\n        {currentSession && (\r\n          <SimplePrinterSessionData sessionId={currentSession} />\r\n        )}\r\n        {log_data.length === 0 && \"No available sessions\"}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default SimplePrinterSessions;\r\n","import React, { Fragment, Dispatch, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport {\r\n  ITableLogActions,\r\n  setTableHeaderLog,\r\n  setTableLog,\r\n} from '../store/actions/tableLogActions';\r\nimport { ITableData } from '../store/reducers/tablePrinterReducer';\r\n\r\nimport { simplePrinter } from '../api';\r\nimport TableSessions from '../components/table/TableSessions';\r\nimport {\r\n  ISimplePrinterLogActions,\r\n  setSimplePrinterLog,\r\n} from '../store/actions/simplePrinterActions';\r\nimport { ISimplePrinterPayload } from '../store/reducers/simplePrinterReducer';\r\nimport { parse } from '@fortawesome/fontawesome-svg-core';\r\nimport SimplePrinterSessions from '../components/simplePrinter/SimplePrinterSession';\r\n\r\nconst SimplePrinter = () => {\r\n  //   const { header, data } = useSelector((state: AppState) => state.tableLog);\r\n  const simplePrinterDispatch = useDispatch<\r\n    Dispatch<ISimplePrinterLogActions>\r\n  >();\r\n\r\n  // const getData = (payload: any) => {\r\n  //   let data: any[] = [];\r\n  //   for (const key in payload) {\r\n  //     data.push(<td>{payload[key]}</td>);\r\n  //   }\r\n\r\n  //   return data.map((datum) => datum);\r\n  // };\r\n\r\n  useEffect(() => {\r\n    const handleSetPayload = (payload: string) => {\r\n      console.log('payload = ', payload);\r\n      const parsedPayload: any = JSON.parse(payload);\r\n      console.log('data after parsing', JSON.stringify(parsedPayload.data));\r\n      if (parsedPayload.sessionId) {\r\n        const payload: ISimplePrinterPayload = {\r\n          sessionId: parsedPayload.sessionId,\r\n          data: [\r\n            {\r\n              id: parsedPayload.data[0].id,\r\n              resultLabel: parsedPayload.data[0].resultLabel,\r\n              resultValue: parsedPayload.data[0].resultValue,\r\n            },\r\n          ],\r\n        };\r\n\r\n        console.log('data = ', JSON.stringify(payload));\r\n        simplePrinterDispatch(setSimplePrinterLog(payload));\r\n      }\r\n      return null;\r\n    };\r\n    simplePrinter((payload: string) => handleSetPayload(payload));\r\n  }, [simplePrinterDispatch]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <SimplePrinterSessions />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default SimplePrinter;\r\n","import { faTimesCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { Dispatch, Fragment, useState } from 'react';\r\nimport { Button, Badge } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  deleteCombinedPrinterSession,\r\n  ICombinedPrinterActions,\r\n} from '../../store/actions/combinedPrinterActions';\r\nimport { AppState } from '../../store/reducers';\r\nimport GraphSessionData from '../graph/GraphSessionData';\r\nimport HtmlPrinterSessionData from '../html/HtmlPrinterSessionData';\r\nimport TableSessionData from '../table/TableSessionData';\r\n\r\nconst CombinedPrinterSessions = () => {\r\n  const { data } = useSelector((state: AppState) => state.combinedPrinter);\r\n  const [currentSession, setCurrentSession] = useState<string>();\r\n  const combinedPrinterDispatch = useDispatch<\r\n    Dispatch<ICombinedPrinterActions>\r\n  >();\r\n\r\n  const handleSetCurrentSesssion = (sessionId: string) => {\r\n    return setCurrentSession(sessionId);\r\n  };\r\n\r\n  const handleDeleteSession = (sessionId: string) => {\r\n    return (\r\n      combinedPrinterDispatch(deleteCombinedPrinterSession(sessionId)),\r\n      setCurrentSession(undefined)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"ml-5\">\r\n        <div>\r\n          <h4>Available Combined Log Sessions</h4>\r\n        </div>\r\n        <div className=\"row ml-2\">\r\n          {data.map((session) => (\r\n            <React.Fragment key={session.sessionId}>\r\n              <div\r\n                style={{\r\n                  border: '1px solid #2e2e2e',\r\n                  borderRadius: 5,\r\n                  padding: 2,\r\n                  margin: 2,\r\n                }}\r\n              >\r\n                <Button\r\n                  key={session.sessionId}\r\n                  variant=\"light\"\r\n                  onClick={() => handleSetCurrentSesssion(session.sessionId)}\r\n                >\r\n                  <span>\r\n                    <Badge\r\n                      pill\r\n                      variant=\"dark\"\r\n                      className=\"font-thin pl-3 pr-3 pb-2 pt-2\"\r\n                    >\r\n                      {session.sessionId}\r\n                      <span style={{ marginRight: '20px' }}></span>\r\n                    </Badge>\r\n                  </span>\r\n                </Button>\r\n                <Button\r\n                  variant=\"light\"\r\n                  onClick={() => handleDeleteSession(session.sessionId)}\r\n                >\r\n                  <FontAwesomeIcon icon={faTimesCircle} />\r\n                </Button>\r\n              </div>\r\n            </React.Fragment>\r\n          ))}\r\n        </div>\r\n        {currentSession && (\r\n          <React.Fragment>\r\n            <HtmlPrinterSessionData sessionId={currentSession} />\r\n            <GraphSessionData sessionId={currentSession} />\r\n            <TableSessionData sessionId={currentSession} />\r\n          </React.Fragment>\r\n        )}\r\n        {data.length === 0 && 'No available sessions'}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default CombinedPrinterSessions;\r\n","import * as types from '../types';\r\nimport { ActionCreator, Action } from 'redux';\r\nimport { ICombinedPrinterPayload } from '../reducers/combinedPrinterReducer';\r\n\r\n//ICombinedPrinter Actions\r\nexport interface ICombinedPrinterActions extends Action {\r\n  type: types.SET_COMBINED_PRINTER_LOG | types.DELETE_COMBINED_PRINTER_SESSION;\r\n  payload: ICombinedPrinterPayload | string;\r\n}\r\n\r\n//ICombinedPrinter Action\r\nconst setCombinedPrinter: ActionCreator<ICombinedPrinterActions> = (\r\n  payload: ICombinedPrinterPayload\r\n) => ({\r\n  type: types.SET_COMBINED_PRINTER_LOG,\r\n  payload: payload,\r\n});\r\n\r\n//ICombinedPrinter Action\r\nconst deleteCombinedPrinterSession: ActionCreator<ICombinedPrinterActions> = (\r\n  payload: string\r\n) => ({\r\n  type: types.DELETE_COMBINED_PRINTER_SESSION,\r\n  payload: payload,\r\n});\r\nexport { setCombinedPrinter, deleteCombinedPrinterSession };\r\n","import React, { Fragment, Dispatch, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { combinedPrinter } from '../api';\r\nimport {\r\n  ICombinedPrinterActions,\r\n  setCombinedPrinter,\r\n} from '../store/actions/combinedPrinterActions';\r\nimport { ICombinedPrinterPayload } from '../store/reducers/combinedPrinterReducer';\r\nimport CombinedPrinterSessions from '../components/combinedPrinter/CombinedPrinterSessions';\r\nconst CombinedPrinterLog = () => {\r\n  const combinedPrinterDispatch = useDispatch<\r\n    Dispatch<ICombinedPrinterActions>\r\n  >();\r\n\r\n  useEffect(() => {\r\n    const handleSetPayload = (payload: string) => {\r\n      const parsedPayload: any = JSON.parse(payload);\r\n      console.log('inside handleSetPayload');\r\n\r\n      const payloadNew: ICombinedPrinterPayload = {\r\n        sessionId: parsedPayload.sessionId,\r\n        grid: parsedPayload.grid,\r\n        combinedViewsPayload: parsedPayload.views,\r\n      };\r\n\r\n      return combinedPrinterDispatch(setCombinedPrinter(payloadNew));\r\n\r\n      // return null;\r\n    };\r\n    combinedPrinter((payload: string) => handleSetPayload(payload));\r\n  }, [combinedPrinterDispatch]);\r\n\r\n  return (\r\n    <Fragment>\r\n      <CombinedPrinterSessions />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default CombinedPrinterLog;\r\n","import { faTimesCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport React, { Dispatch, Fragment, useState } from 'react';\r\nimport { Button, Badge } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {\r\n  deleteCustomPrinterSession,\r\n  ICustomPrinterActions,\r\n} from '../../store/actions/customPrinterActions';\r\nimport { AppState } from '../../store/reducers';\r\nimport { ISimplePrinterPayload } from '../../store/reducers/simplePrinterReducer';\r\n\r\nexport interface ICustomPrinterSessionsProps {\r\n  callback: Function;\r\n}\r\n\r\nconst CombinedPrinterSessions: React.FC<ICustomPrinterSessionsProps> = ({\r\n  callback,\r\n}) => {\r\n  const { sessionData } = useSelector((state: AppState) => state.customPrinter);\r\n  const customPrinterDispatch = useDispatch<Dispatch<ICustomPrinterActions>>();\r\n\r\n  const handleSetCurrentSesssion = (sessionId: string) => {\r\n    return callback(sessionId);\r\n  };\r\n\r\n  const handleDeleteSession = (sessionId: string) => {\r\n    return (\r\n      customPrinterDispatch(deleteCustomPrinterSession(sessionId)),\r\n      callback(undefined)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className=\"ml-5\">\r\n        <div>\r\n          <h4>Available Custom Log Sessions</h4>\r\n        </div>\r\n        <div className=\"row ml-2\">\r\n          {sessionData.map((session: ISimplePrinterPayload) => (\r\n            <React.Fragment key={session.sessionId}>\r\n              <div\r\n                style={{\r\n                  border: '1px solid #2e2e2e',\r\n                  borderRadius: 5,\r\n                  padding: 2,\r\n                  margin: 2,\r\n                }}\r\n              >\r\n                <Button\r\n                  key={session.sessionId}\r\n                  variant=\"light\"\r\n                  onClick={() => handleSetCurrentSesssion(session.sessionId)}\r\n                >\r\n                  <span>\r\n                    <Badge\r\n                      pill\r\n                      variant=\"dark\"\r\n                      className=\"font-thin pl-3 pr-3 pb-2 pt-2\"\r\n                    >\r\n                      {session.sessionId}\r\n                      <span style={{ marginRight: '20px' }}></span>\r\n                    </Badge>\r\n                  </span>\r\n                </Button>\r\n                <Button\r\n                  variant=\"light\"\r\n                  onClick={() => handleDeleteSession(session.sessionId)}\r\n                >\r\n                  <FontAwesomeIcon icon={faTimesCircle} />\r\n                </Button>\r\n              </div>\r\n            </React.Fragment>\r\n          ))}\r\n        </div>\r\n        {sessionData.length === 0 && 'No available sessions'}\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default CombinedPrinterSessions;\r\n","import * as types from '../types';\r\nimport { ActionCreator, Action } from 'redux';\r\nimport { ICustomPrinterPayload } from '../../pages/CustomPrinter';\r\n\r\n//ITable Actions\r\nexport interface ICustomPrinterActions extends Action {\r\n  type: types.SET_CUSTOM_PRINTER_LOG | types.DELETE_CUSTOM_PRINTER_LOG;\r\n\r\n  payload: ICustomPrinterPayload | string;\r\n}\r\n\r\n//ITable Action : Setting logs, caught in saga\r\nconst setCustomPrinterLog: ActionCreator<ICustomPrinterActions> = (\r\n  payload: ICustomPrinterPayload\r\n) => ({\r\n  type: types.SET_CUSTOM_PRINTER_LOG,\r\n  payload: payload,\r\n});\r\nconst deleteCustomPrinterSession: ActionCreator<ICustomPrinterActions> = (\r\n  payload: string\r\n) => ({\r\n  type: types.DELETE_CUSTOM_PRINTER_LOG,\r\n  payload: payload,\r\n});\r\n\r\nexport { setCustomPrinterLog, deleteCustomPrinterSession };\r\n","import React, { Dispatch, Fragment, useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { spiralCustom } from '../api';\r\nimport CustomPrinterSessions from '../components/customPrinter/CustomPrinterSessions';\r\nimport {\r\n  ICustomPrinterActions,\r\n  setCustomPrinterLog,\r\n} from '../store/actions/customPrinterActions';\r\nimport { AppState } from '../store/reducers';\r\n\r\n/* this will be the state for reducer */\r\nexport interface ICustomPrinterState {\r\n  sessionData: ICustomPrinterPayload[];\r\n}\r\n\r\n/* \r\n- define your payload for the json object here\r\n- this object will be the expected payload by reducer\r\n- Unique sessionId is required for every new session\r\n- expand data property of the interface to define your json object\r\n- **example:- data: {id: string; date: Date; name: string;}[]\r\n- above example is defining data to be an array of {id: string; date: Date; name: string;}\r\n*/\r\nexport interface ICustomPrinterPayload {\r\n  sessionId: string; //unique id for every session\r\n  data: any[]; // each object must have unique key id: string\r\n}\r\n\r\nconst CustomPrinter = () => {\r\n  const customPrinterDispatch = useDispatch<Dispatch<ICustomPrinterActions>>();\r\n  const { sessionData } = useSelector((state: AppState) => state.customPrinter);\r\n  const [currentSession, setCurrentSession] = useState('');\r\n  const [\r\n    currentSessionData,\r\n    setCurrentSessionData,\r\n  ] = useState<ICustomPrinterPayload>();\r\n\r\n  const handleSetCurrentSession = (sessionId: string) => {\r\n    return setCurrentSession(sessionId);\r\n  };\r\n\r\n  const temp = typeof handleSetCurrentSession;\r\n\r\n  useEffect(() => {\r\n    const handleSetPayload = (payload: string) => {\r\n      console.log('setting graph data');\r\n      const parsedPayload: any = JSON.parse(payload);\r\n      if (parsedPayload.sessionId) {\r\n        const data: ICustomPrinterPayload = {\r\n          sessionId: parsedPayload.sessionId,\r\n          data: parsedPayload.data,\r\n        };\r\n\r\n        return customPrinterDispatch(setCustomPrinterLog(data));\r\n      }\r\n\r\n      return null;\r\n    };\r\n    spiralCustom((payload: string) => handleSetPayload(payload)); //working\r\n  }, [customPrinterDispatch]);\r\n\r\n  const sessionIndex = (session: ICustomPrinterPayload) =>\r\n    session.sessionId === currentSession ? true : false;\r\n\r\n  useEffect(() => {\r\n    const sessionIndexNew = sessionData.findIndex(sessionIndex);\r\n    console.log('log is = ', JSON.stringify(sessionData[sessionIndexNew])); //working\r\n\r\n    const payload: ICustomPrinterPayload = sessionData[sessionIndexNew]; // not-working\r\n    setCurrentSessionData(payload);\r\n\r\n    console.log('current session = ');\r\n  }, [customPrinterDispatch, currentSession]);\r\n\r\n  const getData = (payload: any) => {\r\n    let data: any[] = [];\r\n    for (const key in payload) {\r\n      if (key !== 'id') data.push(<p key={key}>{payload[key].toString()}</p>);\r\n    }\r\n\r\n    return data.map((datum) => datum);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <React.Fragment>\r\n        <CustomPrinterSessions callback={handleSetCurrentSession} />\r\n      </React.Fragment>\r\n      <React.Fragment>\r\n        <p>\r\n          {currentSessionData?.data.map(\r\n            (datum: any) =>\r\n              datum.id && (\r\n                <React.Fragment key={datum.id}>\r\n                  <div>{getData(datum)}</div>\r\n                </React.Fragment>\r\n              )\r\n          )}\r\n        </p>\r\n      </React.Fragment>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default CustomPrinter;\r\n","import './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport React from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\n// import HtmlPrinter from \"./pages/HtmlPrinter\";\r\nimport GraphPrinter from './pages/Graph';\r\nimport TablePrinter from './pages/TablePrinterPage';\r\nimport Menu from './components/shared/Menu';\r\nimport HtmlPrinter from './pages/HtmlPrinter';\r\nimport SimplePrinter from './pages/SimplePrinterPage';\r\nimport CombinedPrinter from './pages/CombinedPrinterPage';\r\nimport CustomPrinter from './pages/CustomPrinter';\r\n\r\nfunction App() {\r\n  return (\r\n    <React.Fragment>\r\n      <Menu />\r\n      <Switch>\r\n        {/* <Route exact path=\"/\" component={Graph} /> */}\r\n        {/* <Route path=\"/\" component={Home} /> */}\r\n        <Route path=\"/simple-printer\" exact component={SimplePrinter} />\r\n        <Route path=\"/html-printer\" exact component={HtmlPrinter} />\r\n        <Route path=\"/graph-printer\" exact component={GraphPrinter} />\r\n        <Route path=\"/table-printer\" exact component={TablePrinter} />\r\n        <Route path=\"/combined-printer\" exact component={CombinedPrinter} />\r\n        <Route path=\"/custom-printer\" exact component={CustomPrinter} />\r\n        <Route path=\"/\" exact component={TablePrinter} />\r\n      </Switch>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import * as types from '../types';\r\n\r\nexport interface ITableLogsState {\r\n  // if session id exist, push data to data, else push object to state\r\n  sessionData: ITableData[];\r\n}\r\n\r\nexport interface ITableData {\r\n  sessionId: string;\r\n  header?: string[]; // must have unique header names\r\n  data: any[]; //must have id\r\n}\r\n\r\nexport const initialTableLogsState: ITableLogsState = {\r\n  sessionData: [\r\n    {\r\n      sessionId: '0',\r\n      header: ['id', 'timestamp', 'hostname', 'appName', 'priority'],\r\n      data: [\r\n        {\r\n          i: '123123hjasdf', //uuidv4(),\r\n          timestamp: new Date(),\r\n          hostName: 'sdf',\r\n          appName: 'aa',\r\n          priority: 'asdf',\r\n        },\r\n        {\r\n          i: '123123hjasdasdf', //uuidv4(),\r\n          timestamp: new Date(),\r\n          hostName: 'sdf',\r\n          appName: 'aa',\r\n          priority: 'asdf',\r\n        },\r\n      ],\r\n    },\r\n    {\r\n      sessionId: '1',\r\n      header: ['i', 'timestamp', 'hostname', 'appName', 'priority'],\r\n      data: [\r\n        {\r\n          i: '123123hjasdf', //uuidv4(),\r\n          timestamp: new Date(),\r\n          hostName: 'sdf',\r\n          appName: 'aa',\r\n          priority: 'asdf',\r\n        },\r\n        {\r\n          i: '123123hjasdasdf', //uuidv4(),\r\n          timestamp: new Date(),\r\n          hostName: 'sdf',\r\n          appName: 'aa',\r\n          priority: 'asdf',\r\n        },\r\n        {\r\n          i: '123123hjassadf', //uuidv4(),\r\n          timestamp: new Date(),\r\n          hostName: 'sdf',\r\n          appName: 'aa',\r\n          priority: 'asdf',\r\n        },\r\n        {\r\n          i: '123123hjasdasdasdff', //uuidv4(),\r\n          timestamp: new Date(),\r\n          hostName: 'sdf',\r\n          appName: 'aa',\r\n          priority: 'asdf',\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nexport const tablePrinterReducer = (\r\n  state: ITableLogsState = initialTableLogsState,\r\n  action: {\r\n    type:\r\n      | types.SET_TABLE_DATA_LOG\r\n      | types.SET_TABLE_HEADER_LOG\r\n      | types.DELETE_TABLE_SESSION;\r\n    payload: ITableData | string;\r\n  }\r\n): ITableLogsState => {\r\n  const { type, payload } = action;\r\n\r\n  const tablePayload = payload as ITableData;\r\n  const deleteSessionPayload = payload as string;\r\n\r\n  // const { sessionId, data, header } = tableData;\r\n  switch (type) {\r\n    case types.SET_TABLE_DATA_LOG: {\r\n      console.log('payload in reducer = ', JSON.stringify(tablePayload));\r\n\r\n      let tempState = state.sessionData;\r\n\r\n      if (\r\n        state.sessionData.find(\r\n          (session) => session.sessionId === tablePayload.sessionId\r\n        )\r\n      ) {\r\n        console.log('found session id');\r\n\r\n        const sessionIndex = (session: ITableData) =>\r\n          session.sessionId === tablePayload?.sessionId;\r\n        const dataIndex = state.sessionData.findIndex(sessionIndex);\r\n\r\n        const newSession: ITableData = tempState[dataIndex];\r\n\r\n        //adding row to row []\r\n        tablePayload.data?.forEach((data) => newSession.data.push(data));\r\n\r\n        //adding header which is missing\r\n        newSession.data?.forEach((dataSingleton) => {\r\n          console.log('inside for each');\r\n          let name: string;\r\n          for (name in dataSingleton) {\r\n            if (name)\r\n              if (!newSession.header!.find((value) => value === name)) {\r\n                console.log('found difference');\r\n                newSession.header!.push(name);\r\n              }\r\n          }\r\n        });\r\n        tempState[dataIndex] = newSession;\r\n        console.log('new state = ', JSON.stringify(tempState[dataIndex]));\r\n        return { ...state, sessionData: tempState };\r\n      } else {\r\n        const newSession: ITableData = {\r\n          sessionId: tablePayload.sessionId,\r\n          data: tablePayload.data,\r\n          header: [''],\r\n        };\r\n        if (!newSession.header) newSession.header = [''];\r\n\r\n        newSession.data.forEach((dataSingleton) => {\r\n          let name: string;\r\n\r\n          for (name in dataSingleton) {\r\n            if (name)\r\n              if (!newSession.header!.find((value) => value === name)) {\r\n                console.log('found difference');\r\n                newSession.header!.push(name);\r\n              }\r\n          }\r\n        });\r\n        tempState.push(newSession);\r\n        return { ...state, sessionData: tempState };\r\n      }\r\n    }\r\n    case types.DELETE_TABLE_SESSION: {\r\n      const newState = state.sessionData.filter(\r\n        (session) => session.sessionId !== deleteSessionPayload\r\n      );\r\n\r\n      return { ...state, sessionData: newState };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// client is subscribing with ::: {\"sessionId\":\"results2\",\"rowData\":[{\"result\":\"polo\",\"i\":\"0\"}]}\r\n// client is subscribing with ::: {\"sessionId\":\"results2\",\"rowData\":[{\"result\":\"rolo\",\"i\":\"1\",\"elaspsed\":\"rolo\"}]}\r\n// client is subscribing with ::: {\"sessionId\":\"results2\",\"rowData\":[{\"result\":\"kolo\",\"i\":\"2\"}]}\r\n// client is subscribing with ::: {\"sessionId\":\"results2\",\"rowData\":[{\"result\":\"jj\",\"i\":\"3\",\"elaspsed\":\"jj\"}]}\r\n// client is subscribing with ::: {\"sessionId\":\"results2\",\"rowData\":[{\"result\":\"kfing\",\"i\":\"4\"}]}letlet\r\n","import * as types from '../types';\r\n\r\nexport interface IGraphLogsState {\r\n  // if session id exist, push data to data, else push object to state\r\n  sessionData: IGraphData[];\r\n}\r\n\r\nexport interface IGraphData {\r\n  type?: string;\r\n  labels: string[];\r\n  sessionId: string;\r\n  datasets: IGraphDataSingleton;\r\n}\r\n\r\nexport interface IGraphDataSingleton {\r\n  label?: string;\r\n  data?: any[];\r\n}\r\n\r\nexport const initialGraphLogsState: IGraphLogsState = {\r\n  sessionData: [\r\n    {\r\n      type: 'bar',\r\n      labels: [\r\n        '2015-01',\r\n        '2015-02',\r\n        '2015-03',\r\n        '2015-04',\r\n        '2015-05',\r\n        '2015-06',\r\n        '2015-07',\r\n        '2015-08',\r\n        '2015-09',\r\n        '2015-10',\r\n        '2015-11',\r\n        '2015-12',\r\n      ],\r\n      sessionId: '0',\r\n      datasets: {\r\n        label: '# of Tomatoes',\r\n        data: ['12', '19', '3', '5', '2', '3', '20', '3', '5', '6', '2', '25'],\r\n      },\r\n    },\r\n  ],\r\n};\r\n\r\nexport const graphPrinterReducer = (\r\n  state: IGraphLogsState = initialGraphLogsState,\r\n  action: {\r\n    type: types.SET_GRAPH_LOGS | types.DELETE_GRAPH_SESSION;\r\n    payload: IGraphData | string;\r\n  }\r\n): IGraphLogsState => {\r\n  const { type, payload } = action;\r\n\r\n  const graphDataPayload = payload as IGraphData;\r\n  const deleteSessionId = payload as string;\r\n\r\n  switch (type) {\r\n    case types.SET_GRAPH_LOGS: {\r\n      console.log('payload in reducer = ', JSON.stringify(payload));\r\n      if (\r\n        state.sessionData.find(\r\n          (session) => session.sessionId === graphDataPayload?.sessionId\r\n        )\r\n      ) {\r\n        console.log('found session id ');\r\n        const sessionIndex = (session: IGraphData) =>\r\n          session.sessionId === graphDataPayload?.sessionId;\r\n        const tempData = state.sessionData;\r\n        const dataIndex = state.sessionData.findIndex(sessionIndex);\r\n\r\n        if (\r\n          tempData[dataIndex].labels !== graphDataPayload?.labels &&\r\n          tempData[dataIndex].datasets.data !== graphDataPayload.datasets.data\r\n        ) {\r\n          console.log('labels and data is changed');\r\n\r\n          tempData[dataIndex].labels = tempData[dataIndex].labels.concat(\r\n            graphDataPayload?.labels\r\n          );\r\n          tempData[dataIndex].datasets.label = graphDataPayload?.datasets.label;\r\n          tempData[dataIndex].datasets.data = tempData[\r\n            dataIndex\r\n          ].datasets.data?.concat(graphDataPayload?.datasets.data);\r\n        } else if (tempData[dataIndex].labels !== graphDataPayload?.labels) {\r\n          console.log('Labels is changed');\r\n\r\n          tempData[dataIndex].labels = tempData[dataIndex].labels.concat(\r\n            graphDataPayload?.labels\r\n          );\r\n        } else if (\r\n          tempData[dataIndex].datasets.data !== graphDataPayload.datasets.data\r\n        ) {\r\n          console.log('Data and data is changed');\r\n\r\n          tempData[dataIndex].datasets.label = graphDataPayload?.datasets.label;\r\n          tempData[dataIndex].datasets.data = tempData[\r\n            dataIndex\r\n          ].datasets.data?.concat(graphDataPayload?.datasets.data);\r\n        }\r\n\r\n        if (\r\n          state.sessionData[dataIndex].datasets === tempData[dataIndex].datasets\r\n        )\r\n          return state;\r\n\r\n        return { ...state, sessionData: tempData };\r\n      }\r\n      return {\r\n        ...state,\r\n        sessionData: [...state.sessionData, graphDataPayload],\r\n      };\r\n    }\r\n    case types.DELETE_GRAPH_SESSION: {\r\n      const newState = state.sessionData.filter(\r\n        (session) => session.sessionId !== deleteSessionId\r\n      );\r\n\r\n      return { ...state, sessionData: newState };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import * as types from '../types';\r\n\r\nexport interface ISimplePrinter {\r\n  log_data: ISimplePrinterPayload[];\r\n}\r\n\r\nexport interface ISimplePrinterPayload {\r\n  sessionId: string;\r\n  data: {\r\n    id: string;\r\n    resultLabel: string;\r\n    resultValue: string;\r\n  }[];\r\n}\r\n\r\nconst initialSimplePrinterState: ISimplePrinter = {\r\n  log_data: [\r\n    {\r\n      sessionId: '0',\r\n      data: [\r\n        { id: '1', resultLabel: 'adfad', resultValue: '' },\r\n        { id: '2', resultLabel: 'adfas', resultValue: 'asdfasdfdsaf' },\r\n        { id: '3', resultLabel: 'adf', resultValue: 'asdfasdfasdfafds' },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nexport const simplePrinterReducer = (\r\n  state: ISimplePrinter = initialSimplePrinterState,\r\n  action: {\r\n    type: types.SET_SIMPLE_PRINTER_LOG | types.DELETE_SIMPLE_PRINTER_SESSION;\r\n    payload: ISimplePrinterPayload | string;\r\n  }\r\n): ISimplePrinter => {\r\n  const { type, payload } = action;\r\n\r\n  const addSessionPayload = payload as ISimplePrinterPayload;\r\n  const deleteSessionId = payload as string;\r\n\r\n  switch (type) {\r\n    case types.SET_SIMPLE_PRINTER_LOG: {\r\n      console.log('inside set simple printer reducer', JSON.stringify(payload));\r\n      if (\r\n        state.log_data.find(\r\n          (session) => session.sessionId === addSessionPayload.sessionId\r\n        )\r\n      ) {\r\n        const sessionIndex = (session: ISimplePrinterPayload) =>\r\n          session.sessionId === addSessionPayload?.sessionId;\r\n\r\n        const tempData = state.log_data;\r\n        const dataIndex = state.log_data.findIndex(sessionIndex);\r\n        addSessionPayload?.data.forEach((datum) =>\r\n          tempData[dataIndex].data.push(datum)\r\n        );\r\n        if (state.log_data[dataIndex].data === tempData[dataIndex].data)\r\n          return state;\r\n        return { ...state, log_data: tempData };\r\n      }\r\n      return { ...state, log_data: [...state.log_data, addSessionPayload] };\r\n    }\r\n    case types.DELETE_SIMPLE_PRINTER_SESSION: {\r\n      const newState = state.log_data.filter(\r\n        (session) => session.sessionId !== deleteSessionId\r\n      );\r\n\r\n      return { ...state, log_data: newState };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","//{\"sessionId\":\"results\",\"html\":\"<h1>My First Heading</h1><p>My first paragraph.</p><p>My second paragraph.</p>\"}\r\nimport * as types from '../types';\r\n\r\nexport interface IHtmlPrinterState {\r\n  data: IHtmlPrinterPayload[];\r\n}\r\n\r\nexport interface IHtmlPrinterPayload {\r\n  sessionId: string;\r\n  htmlPayload: string;\r\n}\r\n\r\nexport const initialGraphLogsState: IHtmlPrinterState = {\r\n  data: [\r\n    {\r\n      sessionId: '0',\r\n      htmlPayload: `<div class=\"none\"> <h1 style=\"color: red;\" > something is crazy </h1> </div>`,\r\n    },\r\n  ],\r\n};\r\n\r\nexport const htmlPrinterReducer = (\r\n  state: IHtmlPrinterState = initialGraphLogsState,\r\n  action: {\r\n    type: types.SET_HTML_PRINTER_LOG | types.DELETE_HTML_PRINTER_SESSION;\r\n    payload: IHtmlPrinterPayload | string;\r\n  }\r\n): IHtmlPrinterState => {\r\n  const { type, payload } = action;\r\n\r\n  const htmlDataPayload = payload as IHtmlPrinterPayload;\r\n  const deleteSessionId = payload as string;\r\n\r\n  switch (type) {\r\n    case types.SET_HTML_PRINTER_LOG: {\r\n      console.log('payload in reducer = ', JSON.stringify(payload));\r\n      if (\r\n        state.data.find(\r\n          (session) => session.sessionId === htmlDataPayload?.sessionId\r\n        )\r\n      ) {\r\n        console.log('found session id ');\r\n        const sessionIndex = (session: IHtmlPrinterPayload) =>\r\n          session.sessionId === htmlDataPayload?.sessionId;\r\n        const tempData = state.data;\r\n        const dataIndex = state.data.findIndex(sessionIndex);\r\n\r\n        if (tempData[dataIndex].htmlPayload !== htmlDataPayload?.htmlPayload) {\r\n          console.log('labels and data is changed');\r\n\r\n          tempData[dataIndex].htmlPayload =\r\n            tempData[dataIndex].htmlPayload + htmlDataPayload?.htmlPayload;\r\n        }\r\n\r\n        if (\r\n          state.data[dataIndex].htmlPayload === tempData[dataIndex].htmlPayload\r\n        )\r\n          return state;\r\n\r\n        return { ...state, data: tempData };\r\n      }\r\n      return {\r\n        ...state,\r\n        data: [...state.data, htmlDataPayload],\r\n      };\r\n    }\r\n    case types.DELETE_HTML_PRINTER_SESSION: {\r\n      const newState = state.data.filter(\r\n        (session) => session.sessionId !== deleteSessionId\r\n      );\r\n\r\n      return { ...state, data: newState };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import * as types from '../types';\r\n\r\nexport interface ICombinedPrinterState {\r\n  data: ICombinedPrinterPayload[];\r\n}\r\n\r\nexport interface ICombinedPrinterPayload {\r\n  sessionId: string;\r\n  grid: number;\r\n  combinedViewsPayload: { type: string; sessionId: string }[];\r\n}\r\n\r\nconst initialCombinedPrinterState: ICombinedPrinterState = {\r\n  data: [\r\n    {\r\n      sessionId: '0',\r\n      grid: 2,\r\n      combinedViewsPayload: [\r\n        {\r\n          type: '',\r\n          sessionId: '',\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nexport const combinedPrinterReducer = (\r\n  state: ICombinedPrinterState = initialCombinedPrinterState,\r\n  action: {\r\n    type:\r\n      | types.SET_COMBINED_PRINTER_LOG\r\n      | types.DELETE_COMBINED_PRINTER_SESSION;\r\n    payload: ICombinedPrinterPayload | string;\r\n  }\r\n): ICombinedPrinterState => {\r\n  const { type, payload } = action;\r\n\r\n  const addSessionPayload = payload as ICombinedPrinterPayload;\r\n  const deleteSessionId = payload as string;\r\n\r\n  switch (type) {\r\n    case types.SET_COMBINED_PRINTER_LOG: {\r\n      console.log('inside set simple printer reducer', JSON.stringify(payload));\r\n      if (\r\n        state.data.find(\r\n          (session) => session.sessionId === addSessionPayload.sessionId\r\n        )\r\n      ) {\r\n        const sessionIndex = (session: ICombinedPrinterPayload) =>\r\n          session.sessionId === addSessionPayload?.sessionId;\r\n\r\n        const tempData = state.data;\r\n        const dataIndex = state.data.findIndex(sessionIndex);\r\n        addSessionPayload?.combinedViewsPayload.forEach((datum) =>\r\n          tempData[dataIndex].combinedViewsPayload.push(datum)\r\n        );\r\n        if (\r\n          state.data[dataIndex].combinedViewsPayload ===\r\n          tempData[dataIndex].combinedViewsPayload\r\n        )\r\n          return state;\r\n        return { ...state, data: tempData };\r\n      }\r\n      return { ...state, data: [...state.data, addSessionPayload] };\r\n    }\r\n    case types.DELETE_COMBINED_PRINTER_SESSION: {\r\n      const newState = state.data.filter(\r\n        (session) => session.sessionId !== deleteSessionId\r\n      );\r\n\r\n      return { ...state, data: newState };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// let configure_view = {\r\n//   id: 'results_and_elapsed_time',\r\n//   GRID: 2,\r\n//   customViews: [\r\n//     { type: 'TABLE', id: 'results' },\r\n//     { type: 'GRAPH', id: 'elapsed_time' },\r\n//   ],\r\n// };\r\n","import {\r\n  ICustomPrinterPayload,\r\n  ICustomPrinterState,\r\n} from '../../pages/CustomPrinter';\r\nimport { ICustomPrinterActions } from '../actions/customPrinterActions';\r\nimport * as types from '../types';\r\n\r\nconst initialCustomPrinterState: ICustomPrinterState = {\r\n  sessionData: [],\r\n};\r\n\r\n//customPrinterReducer to store the state of custom printer\r\nexport const customPrinterReducer = (\r\n  state: ICustomPrinterState = initialCustomPrinterState,\r\n  action: ICustomPrinterActions\r\n): ICustomPrinterState => {\r\n  const { type, payload } = action;\r\n\r\n  const sessionPayload = payload as ICustomPrinterPayload;\r\n  const deleteSessionPayload = payload as string;\r\n\r\n  // const { sessionId, data, header } = tableData;\r\n  switch (type) {\r\n    case 'SET_CUSTOM_PRINTER_LOG': {\r\n      console.log(\r\n        'payload in Custom Reducer = ',\r\n        JSON.stringify(sessionPayload)\r\n      );\r\n\r\n      let tempState = state.sessionData;\r\n\r\n      if (\r\n        state.sessionData.find(\r\n          (session) => session.sessionId === sessionPayload.sessionId\r\n        )\r\n      ) {\r\n        console.log('found session id');\r\n\r\n        const sessionIndex = (session: ICustomPrinterPayload) =>\r\n          session.sessionId === sessionPayload?.sessionId;\r\n        const dataIndex = state.sessionData.findIndex(sessionIndex);\r\n\r\n        const newSession: ICustomPrinterPayload = tempState[dataIndex];\r\n\r\n        //adding row to row []\r\n        sessionPayload.data?.forEach((data) => newSession.data.push(data));\r\n        tempState[dataIndex] = newSession;\r\n        console.log('new state = ', JSON.stringify(tempState[dataIndex]));\r\n        return { ...state, sessionData: tempState };\r\n      } else {\r\n        const newSession: ICustomPrinterPayload = {\r\n          sessionId: sessionPayload.sessionId,\r\n          data: sessionPayload.data,\r\n        };\r\n        tempState.push(newSession);\r\n        return { ...state, sessionData: tempState };\r\n      }\r\n    }\r\n    case 'DELETE_CUSTOM_PRINTER_LOG': {\r\n      const newState = state.sessionData.filter(\r\n        (session) => session.sessionId !== deleteSessionPayload\r\n      );\r\n\r\n      return { ...state, sessionData: newState };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { tablePrinterReducer } from './tablePrinterReducer';\r\nimport { graphPrinterReducer } from './graphPrinterReducer';\r\nimport { simplePrinterReducer } from './simplePrinterReducer';\r\nimport { htmlPrinterReducer } from './htmlPrinterReducer';\r\nimport { combinedPrinterReducer } from './combinedPrinterReducer';\r\nimport { customPrinterReducer } from './customPrinterReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n  tablePrinter: tablePrinterReducer,\r\n  graphPrinter: graphPrinterReducer,\r\n  simplePrinter: simplePrinterReducer,\r\n  htmlPrinter: htmlPrinterReducer,\r\n  combinedPrinter: combinedPrinterReducer,\r\n  customPrinter: customPrinterReducer,\r\n});\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\nexport default rootReducer;\r\n","import { all } from \"redux-saga/effects\";\r\n\r\nexport default function* rootSaga() {\r\n  yield all([]);\r\n}\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport rootReducer from './reducers';\r\nimport rootSaga from './sagas';\r\n// import { initializeApp } from 'firebase';\r\n\r\nconst initialState = {};\r\n\r\nexport function store() {\r\n  const sagaMiddleware = createSagaMiddleware();\r\n  const middleware = [sagaMiddleware];\r\n  if (process.env.NODE_ENV === `development`) {\r\n    const { logger } = require(`redux-logger`);\r\n\r\n    middleware.push(logger);\r\n  }\r\n  return {\r\n    ...createStore(\r\n      rootReducer,\r\n      initialState,\r\n      composeWithDevTools(applyMiddleware(...middleware))\r\n    ),\r\n    runSaga: sagaMiddleware.run(rootSaga),\r\n  };\r\n}\r\n\r\n// const sagaMiddleware = createSagaMiddleware();\r\n// const middleware = [sagaMiddleware];\r\n\r\n// const theStore = createStore(\r\n//   rootReducer,\r\n//   initialState,\r\n//   composeWithDevTools(applyMiddleware(...middleware))\r\n// );\r\n// useEffect(() => {\r\n//   sagaMiddleware.run;\r\n// });\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { store } from \"./store/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nconst Store = store();\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <Provider store={Store}>\r\n        <App />\r\n      </Provider>\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}