UC4. Logging multiple lines at once

  1. User writes a long running program, mocked up by this pseudocode

     for i in 0..10 {
        start := current time
        result := run long running task
     }

  2. User imports package or library in language appropriate manner 
 
     import logging library

     for i in 0.. {
        start := current time
        result := run long running task
     }

   3. User configures loggers to display data as a table
 
     import logging library

     configure_logger("localhost", 3000, "results", TABLE)

     for i in 0.. {
        start := current time
        result := run long running task
        duration := concat(current time - start, "s")
     }

   4. User writes code to collect results into a single data structure

       import logging library

     configure_logger("localhost", 3000, "results", TABLE)

     results := List()

     for i in 0.. {
        start := current time
        result := run long running task
        duration := concat(current time - start, "s")

        results.append(["i": i, "result": result, "elapsed": durationd])
     }
 

   5. User logs result collection all at once:
 
     import logging library

     configure_logger("localhost", 3000, "results", TABLE)

     results := List()

     for i in 0..3 {
        start := current time
        result := run long running task
        duration := concat(current time - start, "s")

        results.append(["i": i, "result": result, "elapsed": duration])
     }

     log_all("results", results)
 
   5. User turns on browser pointed at the logging server at address indicating a concrete logger "localhost:3000/log=results". 

   6. User starts program.

   7. Program runs and sends configuration for "results" to server at localhost:3000 as JSON.

   8. Server receives configuration information, performs configuration.

   9. Program continues running and sends data to "results" containing three columns and 4 rows.

  10. Server receives data, performs visualization.
  
  11. The browser prints the data all at once as the appropriate format:

        +---+-------------+-------------+
        | n | elapsed     | result      |
        +---+-------------+-------------+
        | 0 | 6s          | asia        |
        +---+-------------+-------------+
        | 1 | 42s         | basia       |
        +---+-------------+-------------+
        | 2 | 180s        | casia       |
        +---+-------------+-------------+
        | 3 | 13s         | dasia       |
        +---+-------------+-------------+

